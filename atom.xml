<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LYB的部落格</title>
  <icon>https://www.gravatar.com/avatar/f1785de206ac4db4a76778038052af11</icon>
  <subtitle>念念不忘，必有回响</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yubiao-li.gitee.io/"/>
  <updated>2020-04-04T06:23:50.476Z</updated>
  <id>http://yubiao-li.gitee.io/</id>
  
  <author>
    <name>LYB</name>
    <email>805650945@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字节跳动前端开发实习生面经</title>
    <link href="http://yubiao-li.gitee.io/2020/03/25/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yubiao-li.gitee.io/2020/03/25/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-03-25T04:53:35.000Z</published>
    <updated>2020-04-04T06:23:50.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>这次面试一共面了4轮技术面+1轮hr面（太难了我），过了太久了很多题目都记不清了，这里就把所有面试的题目都整合在一起分类别来记录，希望能够帮到同样在春招挣扎的你，反正我已经上岸啦</li></ul><h2 id="计算机基础">计算机基础</h2><ol style="list-style-type: decimal"><li>你本科期间应该学过操作系统吧？那你说一下进程和线程的区别<ul><li>线程是轻量级的进程，如同火车与车厢的关系，把CPU比作人，人从一列行驶的火车转移到另一列火车很难，但是在同一列火车上换车厢比较容易（指开销）</li></ul></li><li>你了解页面置换算法吗？讲一下LRU<ul><li>页面置换算法详见<a href="https://yubiao-li.gitee.io/2020/03/25/2019-SCUT-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/">操作系统复习</a>。LRU是使用老化算法来选择置换页</li></ul></li><li>再聊聊编译原理吧，说说编译代码的流程<ul><li>（我怎么记得啊）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200325120408.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li>你在项目里面有做后端的工作？那你写一下这个sql查询语句，在表user(name)中选择按name倒序排序的第一条记录 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="keyword">user</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">desc</span> <span class="keyword">name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span></pre></td></tr></table></figure></li></ol><h2 id="前端相关">前端相关</h2><ol style="list-style-type: decimal"><li>项目中的登录认证怎么做的<ul><li>使用cookie</li></ul></li><li>了解跨域吗，跨域的解决方案<ul><li>详见<a href="https://yubiao-li.gitee.io/2020/01/03/django%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3/">我的另一篇博客</a></li></ul></li><li>用原生实现，一个父组件包含若干个子组件，要求可以动态增加子组件，并且点击每一个子组件可以输出他自己的顺序<ul><li>考察的是事件委托和事件冒泡 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myLinks"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'inputTest'</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"myLinks"</span>).addEventListener(<span class="string">"change"</span>, e =&gt; &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.target.value)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">            inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> inputs)&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                if(inputs[i]==e.target)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(i)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure></li></ul></li><li>父组件包含一个浮动的子组件，要让父组件和子组件相同高度<ul><li>基本思路是清除浮动与创建BFC<ol style="list-style-type: decimal"><li><p>清除浮动 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">clear</span>: both;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">visibility</span>: hidden;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attribute">display</span>: block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    *zoom: 1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p></li><li><p>创建BFC <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></pre></td></tr></table></figure></p></li></ol></li></ul></li><li>左右两个div，左边的div高度随内容变化而变化，要求右边div与左边div高度相同<ul><li>利用<code>display:table-cell</code>或者<code>display:flex</code></li></ul></li><li>实现一个footer，当内容不足的时候显示在页面底部，当内容超出的时候自动在内容下方<ul><li>为内容div设置<code>min-height:100%</code>即可</li></ul></li><li>输入一个url到浏览器返回页面经历了什么<ol style="list-style-type: decimal"><li><p>输入url后，首先需要找到这个url域名的服务器ip，为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存查找顺序为：浏览器缓存-&gt;系统缓存-&gt;路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器。得到服务器ip地址后，浏览器根据ip以及端口号构造一个http请求，这个请求报文会包括这次请求的信息，主要是请求方法，请求说明请求附带的数据，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层、网络层、数据链路层、物理层到达服务器，服务器解析这个请求并做出响应，返回相应的html给浏览器。</p></li><li><p>因为html是一个树形结构，浏览器根据这个html来构建DOM树，在DOM树的构建过程中如果遇到JS脚本和外部JS连接，则会停止构建DOM树来执行和下载相应的代码，这会造成阻塞，其根本原因在于，JS会对DOM进行操作，浏览器无法预测未来的DOM节点的具体内容，为了防止无效操作，节省资源，这就是为什么推荐JS代码应该放在html代码的后面。之后根据外部样式、内部样式、内联样式构建一个CSS对象模型树CSSOM树，构建完成后和DOM树合并为渲染树，根据渲染树计算每个节点的位置大小等信息。</p></li><li><p>之后是渲染页面，因为html文件中会包含图片、视频、音频等资源，在解析DOM的过程中，遇到这些都会并行下载。当然在下载之前会先查看是否过期，常用的首部字段为Cache-Control和Expires，它们的区别是Cache-Control使用相对时间，Expires使用的是基于服务器端的绝对时间，因为存在时差问题，一般采用Cache-Control。如果没有过期使用本地缓存，过期则请求并在服务器校验文件是否修改，以此决定是否返回304</p></li></ol></li><li>你使用过哪些ES6特性<ul><li>这个随便吹，只要答得上来就可以，没有把握的不要说</li></ul></li><li>给一段代码问输出 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test)   <span class="comment">// [Function: test]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span></pre></td></tr></table></figure><ul><li>这里涉及了变量声明时的提升，由于function的提升总在var之后，所以实际执行先声明了<code>var test</code>，然后声明了<code>function test</code>，所以此处输出为<code>Function</code></li></ul></li><li>for-of 与 for-in 的区别<ul><li>for-of专门用来遍历数组，for-in可以遍历数组或者对象</li></ul></li><li>判断img标签的图片加载完成<ul><li>使用onload事件</li></ul></li><li>页面优化的方法<ol style="list-style-type: decimal"><li><p>使用精灵图技术，将多个小图片合并，减少http请求</p></li><li><p>使用CDN</p></li><li><p>添加Expires头或者Cache-control（相对时间），设置过期时间，缓存组件</p></li><li><p>压缩组件：从HTTP1.1开始，Web客户端可以通过请求中的Accept-Encoding头来表示对压缩的支持，例<code>Accept-Encoding: gzip,deflate</code>。服务器可以选用其中的一种方法来压缩文件，可以通过response的Content-Encoding来通知客户端</p></li><li><p>将样式表放在头部，可以减少页面首屏出现的时间，使页面内容逐步呈现。将脚本放在底部，因为脚本会阻塞Dom树的构建</p></li><li><p>避免CSS表达式，使用js事件处理机制来动态改变元素的样式，使函数运行次数在可控范围内</p></li><li><p>使用外部的JS和CSS，浏览器就有可能缓存他们，从而提高加载速度</p></li><li><p>减少DNS查询，通过减少主机名</p></li><li><p>压缩精简js、css代码</p></li></ol></li><li>重绘与重排<ul><li><p>DOM的变化影响到了渲染树的几何属性比如宽高，浏览器需要重新计算几何属性生成新的渲染树，称为重排</p></li><li><p>浏览器将受到影响的部分重新绘制在屏幕上的过程称为重绘</p></li></ul></li></ol><h2 id="算法题">算法题</h2><ol style="list-style-type: decimal"><li><p>实现一个快速排序</p></li><li><p>二叉树反转（左子树变右子树）</p></li></ol><h2 id="框架由于我说主要用的vue所以考察的也是vue">框架（由于我说主要用的Vue，所以考察的也是Vue）</h2><ol style="list-style-type: decimal"><li>Vue实现数据的双向流动<ul><li>使用prop将父组件值传给子组件，子组件使用$emit来触发事件更新父组件值</li></ul></li><li>会用v-model吗<ul><li><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model" target="_blank" rel="noopener">官方文档</a>送上</li></ul></li><li>Vue的双向绑定原理<ol style="list-style-type: decimal"><li><p>通过object.defineProperty()使得对象变得可观测</p></li><li><p>使用发布者——订阅者模式来响应变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.subs = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//增加订阅者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    addSub(sub)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//判断是否增加订阅者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    depend () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.addSub(Dep.target)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//通知订阅者更新</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    notify()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            sub.update()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">Dep.target = <span class="literal">null</span>;</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observable</span> (<span class="params">obj</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        defineReactive(obj,key,obj[key])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> obj;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj,key,val</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">get</span>()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            dep.depend();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>属性被读取了`</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">set</span>(newVal)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            val = newVal;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>属性被修改了`</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            dep.notify()                    <span class="comment">//数据变化通知所有订阅者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>创建观察者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(vm,exp,cb)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.vm = vm;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.exp = exp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.cb = cb;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();  <span class="comment">// 将自己添加到订阅器的操作</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    update()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> oldVal = <span class="keyword">this</span>.value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.value = value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">get</span>()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Dep.target = <span class="keyword">this</span>;  <span class="comment">// 缓存自己</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.exp]  <span class="comment">// 强制执行监听器里的get函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Dep.target = <span class="literal">null</span>;  <span class="comment">// 释放自己</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> value;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>数组push是怎么监听的：实际原理差不多，也是使用了defineProperty</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(arrayMethods,<span class="string">'push'</span>,&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    value:<span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//缓存原生方法，之后调用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">const</span> original = arrayProto[<span class="string">'push'</span>]  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    original.apply(<span class="keyword">this</span>,args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(obarr)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li></ol></li><li>v-for循环中的key值可以使用index吗<ul><li><p>key在diff算法中使用，使用index作为key会导致逻辑错误，并且影响diff算法的效率 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    &lt;div v-<span class="keyword">for</span>=<span class="string">"(item, index) in list"</span> :key=<span class="string">"index"</span> &gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>template&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        id: <span class="number">1</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"Person1"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        id: <span class="number">2</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"Person2"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        id: <span class="number">3</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"Person3"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        id:<span class="number">4</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        name:<span class="string">"Person4"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">];</span></pre></td></tr></table></figure></p></li><li><p>如果我删除了第二个item，那么删除前 |key|id|index|name| |-|-|-|-| |0|1|0|person1| |1|2|1|person2| |2|3|2|person3| |3|4|3|person4|</p><p>删除后 |key|id|index|name| |-|-|-|-| |0|1|0|person1| |1|3|1|person3| |2|4|2|person4| 可以看出相同的key此时对应的是不同的dom元素，会导致逻辑出错，比如原本checkbox选中的是key为1的元素，删除后原本key为2的元素会被选中</p></li><li><p>详见vue的diff算法</p></li></ul></li></ol><h2 id="hr面">hr面</h2><ol style="list-style-type: decimal"><li><p>你觉得最骄傲的一件事是什么</p></li><li><p>你在上一份实习获得了什么</p></li><li><p>你在实习期间遇到了什么挑战，怎么解决的</p></li></ol><h2 id="智力题">智力题</h2><ol style="list-style-type: decimal"><li>给你1000杯水和小白鼠，只有一杯水有毒，小白鼠喝下水后24小时后才能看到结果，如何用最少的代价来检测出哪杯水有毒<ul><li>我开始想的是把水对半分来检测的方法，需要实验10次，那就是10天，后来在网上找到最优解，原来是一道多路复用器的题目，翻译成数字逻辑的题目来说就是问需要多少个输入可以表示1000个输出，解析详见<a href="https://blog.csdn.net/lovelimx/article/details/8989075" target="_blank" rel="noopener">这里</a></li></ul></li></ol><h2 id="经验总结">经验总结</h2><ol style="list-style-type: decimal"><li><p>面试其实是有套路可循的，先是考察本科期间课程学习的怎么样，也就是计算机基础的知识（对复习有兴趣的可以参考我的博客期末复习专题），接着就是考察对工作基础能力的掌握（html+css+js），然后是对流行框架的考察（vue或react），然后考察你对底层实现的了解，最后就是问一问项目。这就需要在平时工作学习中养成多想多实验的习惯，不要对问题一知半解</p></li><li><p>墨菲定律，不要保有侥幸心理，你越觉得不可能考什么，他就真的会考什么</p></li><li><p>不要不懂装懂，面试官也能理解不是每个人都能面面俱到，你可以在问到不会的时候把问题引开，但是不要硬答，因为即使你蒙对了，他问你为什么你也不知道，没有意义</p></li><li><p>不了解的项目不要往简历上写，他不一定只问你写在简历上的第一个项目</p></li><li><p><strong>一定一定</strong>准备自我介绍，介绍自己本科期间的成就与实习经历，身高体重爱好什么的就不用啦</p></li><li><p>心态放平，找工作就是70%实力+30%运气，听说爱笑的大学生运气都不会太差</p></li></ol><h2 id="祝各位大佬都能拿到心仪的offer啦顺便打个广告有想一起深圳实习租房的私我">祝各位大佬都能拿到心仪的offer啦，顺便打个广告，有想一起深圳实习租房的私我~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这次面试一共面了4轮技术面+1轮hr面（太难了我），过了太久了很多题目都记不清了，这里就把所有面试的题目都整合在一起分类别来记录，希望能够帮到同样在春招挣扎的你，反正我已经上岸啦&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id
      
    
    </summary>
    
    
    
      <category term="面经" scheme="http://yubiao-li.gitee.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-编译原理复习大纲</title>
    <link href="http://yubiao-li.gitee.io/2020/03/25/2019-SCUT-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2020/03/25/2019-SCUT-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/</id>
    <published>2020-03-25T03:20:50.000Z</published>
    <updated>2020-03-25T04:55:31.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译程序总框">编译程序总框</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200325120408.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="词法分析">词法分析</h2><ol style="list-style-type: decimal"><li>NFA转DFA<ol style="list-style-type: decimal"><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://m.qpic.cn/psb?/V10MalFd1CQ8f5/Bw92tEbi4Az36eUqGgnBiN.Wxxyvg9X*PFZjY2KNBAw!/b/dMUAAAAAAAAA&bo=IwVGAwAAAAADB0E!&rf=viewer_4" alt="合并NFA所有可以同时到达的状态集，若状态集中包含接收状态，则新状态为接收状态" title="">                </div>                <div class="image-caption">合并NFA所有可以同时到达的状态集，若状态集中包含接收状态，则新状态为接收状态</div>            </figure></li><li>最小化状态数：若两个状态同为接收状态或非接收状态，且接收相同的字符去到相同的状态，则这两个状态是等价的，可以合并为一个状态</li></ol></li><li>五种类型Token：标识符，保留字，数字，操作符，特殊符号</li></ol><h2 id="语法分析">语法分析</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://m.qpic.cn/psb?/V10MalFd1CQ8f5/KV.YMLS9TimdxmQMGqUWhz6NxjUtkdnta0D27ltIAuw!/b/dDQBAAAAAAAA&bo=DQVuAwAAAAADB0c!&rf=viewer_4" alt="四种文法" title="">                </div>                <div class="image-caption">四种文法</div>            </figure><ol style="list-style-type: decimal"><li>上下文无关文法（CFG）<ul><li>概念：一个四元组 G=(V<sub>T</sub>,V<sub>N</sub>,S,P),其中：<ul><li>V<sub>T</sub>：终结符集合（非空）</li><li>V<sub>N</sub>：非终结符集合（非空）</li><li>S：文法的开始符号</li><li>P：产生式集合 &gt; 巴克斯范式 把—&gt;用::=表示</li></ul></li><li>句型、句子和语言：<ul><li>可由开始符号推出的即为句型</li><li>不含非终结符的句型叫句子</li><li>所有句子的全体叫做语言</li></ul></li><li>若一个句子不对应唯一的一颗语法分析树，则这个文法是二义的；若一个语言找不到无二义的文法，则这个语言是二义的</li></ul></li><li>抽象语法树<ul><li>语法分析树包含了过多的无用信息，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://m.qpic.cn/psb?/V10MalFd1CQ8f5/FQimAsZWAMee88mzpyuhrnBuJ*k52bh2mJHNJvBpj30!/b/dDcBAAAAAAAA&bo=7ATmAQAAAAADBy0!&rf=viewer_4" alt="语法分析树与抽象语法树" title="">                </div>                <div class="image-caption">语法分析树与抽象语法树</div>            </figure></li></ul></li><li>语法分析<ol style="list-style-type: decimal"><li>目标：给定一个token序列，找到一个语法分析树与之匹配</li><li>匹配方法：<ul><li>自顶向下：从开始符号进行推导，试图找到一个推导方式可以推导成该用户代码<ul><li>问题：应该采用哪个产生式进行规约</li><li>LL(1)文法:第一个L表示从左到右扫描输入字符串，第二个L表示最左推导，k表示需要向前看k个token<ul><li>FIRST(β) = { a ∈ V<sub>T</sub> | β =&gt;* a......} , if β=&gt; * ε then ε ∈ FIRST(β)</li><li>FOLLOW(A)={a ∈ V<sub>T</sub> | S=&gt;* …Aa…}， if S=&gt;* …A, then $ ∈ FOLLOW(A)</li><li>如何判断一个文法是LL(1)的：<ul><li>For each production A → α<sub>1</sub> | α<sub>2</sub> |…| α<sub>n</sub> , for all i and j, 1≤i, j ≤ n, i≠j , First( α<sub>i</sub> ) ∩ First(α<sub>j</sub> ) = Φ</li><li>For each nonterminal A such that First(A) contains ε, First(A)  ∩ Follow(A) = Φ.<br> <em>若一个文法是左递归的或者有左公因子，那么它一定不是LL(1)文法</em> <br><strong>将非LL(1)文法转换为LL(1)文法</strong><ul><li>消除左公因子：<ul><li>A→αβ<sub>1</sub> |αβ<sub>2</sub> |…|αβ<sub>n</sub> <br>可以重写为<br> A→αA’ <br> A’→ β<sub>1</sub> |β<sub>2</sub> |…|β<sub>n</sub></li></ul></li><li>消除左递归：<ul><li>A→Aα<sub>1</sub> |Aα<sub>2</sub> |…|Aα<sub>m</sub> |β<sub>1</sub> |β<sub>2</sub> |…|β<sub>n</sub> <br>可以重写为<br>A→β<sub>1</sub>A’|β<sub>2</sub>A’|…|β<sub>n</sub>A’<br> A’→α<sub>1</sub>A’|α<sub>2</sub>A’|…|α<sub>m</sub>A’|ε</li></ul></li></ul></li></ul></li></ul></li><li>解决：可预测的分析方法<ul><li>递归下降分析法：首先判断是否为LL(1)文法，然后构造递归下降分析器</li><li>LL(1)分析法：<ol style="list-style-type: decimal"><li>首先构造LL(1)分析表，对每个M[A,a]，确定每个产生式A-&gt;α在表中的位置。对每个终结符 a ∈ FIRST(α)，把A-&gt;α加至M[A,a]中；若 ε ∈ FIRST(α)，则对任何 b ∈ FOLLOW(A) 把 A-&gt; α 加至M[A,b]中</li><li>利用符号栈进行分析。将开始符号推入栈顶，当前输入字符为a，利用LL(1)分析表进行相应的操作<br> <img src="http://222.16.42.161/meol/data/convert/2019/4/22/dbb8598e-0317-4dbc-af17-14aae24a5e36_page-54" alt="操作流程" /></li></ol></li><li>错误恢复——恐慌模式：语法分析器忽略输入中的一些符号，直到输入中出现同步词法单元集合中的某个词法单元<ul><li>常将FOLLOW(A)放到非终结符A的同步集合中</li><li>较高层次的开始符号加入到较低构造的同步集合中去</li><li>FIRST(A)</li><li>默认使用推导出空串的产生式</li><li>若栈顶的一个终结符不被匹配，则将该终结符弹出栈，并发出一个消息称已经插入了这个终结符</li></ul></li></ul></li></ul></li><li>自底向上：从用户代码开始，找到一个规约的方法使得其能回到开始符号<ul><li>这个从左到右自底向上的分析相当于最右推导的逆运算，每一个最右推导得到的中间句型称为右句型</li><li>短语、直接短语和句柄：以某非终结符为根的所有末端结点从左到右排列就是相对于该非终结符的一个短语；如果子树只有两代，该短语就是直接短语；句柄是最左端的直接短语，即需要马上进行规约的直接短语；</li><li>前缀、活前缀：字的前缀指字的任意首部，如字abc的前缀有ε,a,ab,abc；活前缀指不含句柄之后的任何符号的前缀</li><li>LR(K)分析法：L表示从左到右处理输入，R表示会产生一个最右推导，k表示需要向前看k个token &gt; LR(0) &lt; SLR(1) &lt; LR(1) &lt; 无二义文法<ol style="list-style-type: decimal"><li>构造LR分析表：先拓展文法，再根据所有项目构建DFA<ul><li><p>若不存在一个项目集既含规约项目又含移进项目或者含有多个规约项目，则该文法是 <strong>LR(0)</strong> 的文法，若项目集I<sub>k</sub>属于移进项目且GO(I<sub>k</sub>,a)=I<sub>j</sub>，a为终结符，则置ACTION[k,a]为sj；若I<sub>k</sub>为规约项目，则所有a，ACTION[k,a]为rj（j表示第j个产生式）；若S'-&gt;S·属于I<sub>k</sub>，则置ACTION[k,#]为acc</p></li><li><p>若有规约-移进冲突，使用 <strong>SLR(1)</strong> 解决冲突：假定该状态集移进项目的下一个终结符与规约项目的FOLLOW两两不相交（包括不得有两个#），则面临任何输入a都有唯一选择</p></li><li><p>若FOLLOW集合相交，则使用 <strong>LR(1)</strong> 解决冲突：项目附带1个终结符，称为向前搜索字符串或展望串，利用这个展望串来进行规约，展望串通过下一个非终结符的FIRST集合或下一个终结符生成</p></li></ul></li></ol></li></ul><img src="http://m.qpic.cn/psb?/V10MalFd1CQ8f5/t7fGGNSQwI6ilXuKvYxO3OenEkkWQPaXHswSwRgeG14!/b/dE4BAAAAAAAA&amp;bo=gAc4BAAAAAADB5k!&amp;rf=viewer_4" title="fig:" alt="操作过程" /></li></ul></li></ol></li></ol><h2 id="语法制导的翻译">语法制导的翻译</h2><ol style="list-style-type: decimal"><li>语法制导定义（SDD）是一个上下文无关文法和属性及规则的结合 &gt; 一个没有副作用的SDD也称为属性文法<ol style="list-style-type: decimal"><li>属性的区分：<ul><li>综合属性：根据右部候选式中的符号的属性计算左部被定义符号的综合属性，既根据子结点的属性和父节点自身的属性来计算父节点的综合属性</li><li>继承属性：根据右部候选式中的符号的属性和左部被定义符号的属性计算右部候选式中的符号的继承属性，既根据父节点和兄弟结点的属性计算子节点的继承属性</li></ul></li><li>属性计算的三种方法：<ul><li>依赖图：依赖图为每个属性设置一个结点，若属性b依赖于属性c，则从属性c的结点有一条有向边连接到属性b的结点。首先构造有向图，若该有向图不存在环，则称该文法为良定义的</li><li>树遍历算法：如果还有没被计算的属性，就遍历树，将所有能计算的属性都计算出来</li><li>一遍扫描：使用mknode(),mkleaf()边构建抽象语法树边计算属性 <img src="http://m.qpic.cn/psb?/V10MalFd1CQ8f5/iC5t4PYvFH0.830g8x.fpIA9Po48NDWnOR9.tIrsWuQ!/b/dLYAAAAAAAAA&amp;bo=5gQKAgAAAAADB8g!&amp;rf=viewer_4" alt="示例" /></li></ul></li><li>属性文法分类：<ul><li>S-属性文法：所有属性都是综合属性的属性文法</li><li>L-属性文法：每个产生式每个属性或者是综合属性，或者这个继承属性只依赖于这个结点的左兄弟属性与父节点的继承属性 &gt; S-属性文法一定是L-属性文法</li></ul></li></ol></li><li><p>一个显示了所有属性值的语法分析树称为注释语法分析树</p></li><li>语法制导的翻译方案（SDT，翻译模式）：原来的语义规则只给出了属性计算的定义，没给出属性计算的次序，翻译模式把语义动作用花括号{}括起来，插入到产生式右部合适的位置上。如果既有综合属性又有继承属性，在建立翻译模式时就必须保证：<ol style="list-style-type: decimal"><li>产生式右边的符号的继承属性必须在这个符号以前的动作计算出来</li><li>一个动作不能引用这个动作右边的符号的综合属性</li><li>产生式左边的非终结符的综合属性只有在它所引用的所有属性都计算出来以后才能计算</li></ol></li><li>递归下降翻译器<ol style="list-style-type: decimal"><li>按照产生式右部从左到右，对于终结符、非终结符和语义动作，分别实现<ul><li>对带有综合属性x的终结符X，把x的值存入为X.x设置的变量中。然后匹配X，读入下一个输入符号</li><li>对每个非终结符B，产生一个右边带有函数调用的赋值语句c=B(b1,b2,...)，其中，b1...是为B的继承属性设置的变量，c是为B的综合属性设置的变量</li><li>对于语义动作，把动作的代码抄进分析器中，用代表属性的变量来代替对属性的每一次引用</li></ul></li></ol></li></ol><h2 id="中间代码生成">中间代码生成</h2><ol style="list-style-type: decimal"><li><p>DAG——一个用来表示具有公共子表达式的语法的有向无环图</p></li><li>步骤：<ol style="list-style-type: decimal"><li>中间代码生成</li><li>生成某种形式的汇编代码而不是可执行的代码</li><li>（可选）代码优化</li></ol></li><li>IR(Intermediate Representation)<ul><li>一种在翻译过程中用来表示源代码的数据结构，如抽象语法树</li></ul></li><li>中间代码(Intermediate Code)<ul><li>用一种顺序形式来替代中间表示的更类似于目标代码的形式</li><li>其中最流行的中间代码：三地址码（TAC）：<ul><li><p>三地址码示例：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://a4.qpic.cn/psb?/V10MalFd1CQ8f5/z6xrPJlY6uZvR8PtSn*PZ6FfKLc.urYMKEHgNBoshPQ!/m/dL8AAAAAAAAAnull&bo=1AXlAQAAAAADBxc!&rf=photolist&t=5" alt="三地址码示例" title="">                </div>                <div class="image-caption">三地址码示例</div>            </figure></p></li><li>表示方法：三元组与四元组：<ul><li>四元组：运算符，2个操作数地址，1个结果地址</li><li>三元组：运算符，2个操作数地址，指令本身用来存储临时变量</li><li>优劣：三元组节省地址空间，并且不需要额外为临时变量命名，但是三元组在优化的时候位置会变化导致指令也需要相应变化，而四元组更适合优化</li><li>间接三元式——三元式表+间接码表：三元式表存储操作，间接码表存储操作次序，这样优 化代码的时候只需要更改间接码表</li></ul></li></ul></li></ul></li><li><p>SSA——一种IR方便了代码优化</p></li><li>控制流<ul><li>多遍扫描<ul><li>建立语法树</li><li>自上而下地计算继承属性</li><li>自下而上计算综合属性生成代码</li></ul></li><li>一遍扫描<ul><li>约定：<ul><li>(jnz,a,-,p) 表示if a goto p</li><li>(jrop,x,y,p) 表示 if x rop y goto p</li><li>(j,-,-,p) 表示 goto p</li></ul></li><li>扩展文法加上一个ε产生式，用于存储下一个非终结符代码的起始位置</li><li>对于E -&gt; id<sub>1</sub> relop id<sub>2</sub>，生成truelist与falselist链表，发射一个真跳转四元组与一个假跳转四元组</li><li>规约则将进行回填</li></ul></li></ul></li><li>代码优化的主要方法：<ol style="list-style-type: decimal"><li>将经常使用的值放在寄存器中</li><li>减少不必要的操作，如将公共计算的代码结果保存起来</li><li>用一些更廉价的方法实现某种耗时操作，如将递归转换为循环</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译程序总框&quot;&gt;编译程序总框&lt;/h2&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overla
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-操作系统复习大纲</title>
    <link href="http://yubiao-li.gitee.io/2020/03/25/2019-SCUT-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2020/03/25/2019-SCUT-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/</id>
    <published>2020-03-25T03:19:33.000Z</published>
    <updated>2020-03-25T03:20:20.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冯诺伊曼计算机模型">冯·诺伊曼计算机模型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://bkimg.cdn.bcebos.com/pic/574e9258d109b3de4ae00173ccbf6c81800a4c4a?x-bce-process=image/resize,m_lfit,w_220,h_220,limit_1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="进程与线程">进程与线程</h2><h3 id="进程pcb">进程PCB</h3><ul><li>进程PCB包含的内容<ol style="list-style-type: decimal"><li>一个独立的进程空间，可装入进程映像；</li><li>一个独立的进程相关联的执行文件</li><li>进程所用的系统资源；</li><li>一个或多个线程。（进程在创建时一般同时创建好第一个线程， 其他线程按需要由用户程序请求创建）</li></ol></li></ul><h2 id="进程的状态">进程的状态</h2><ol style="list-style-type: decimal"><li>进程有三大状态<ul><li>running，正在使用CPU</li><li>ready，可以被运行，正在等待</li><li>blocked，不能运行直到外部事件发生</li></ul></li><li>状态转换 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200310132454.png" /></li></ol><h3 id="进程调度">进程调度</h3><ol style="list-style-type: decimal"><li><p>FCFS，先到先服务。缺点：护航效应</p></li><li><p>JSF，最短作业优先。缺点：饿死</p></li><li><p>Round-robin，时间片。缺点：频繁的上下文切换，没有考虑优先级</p></li><li><p>Priority Scheduling，优先队列，每个任务分配一个优先级，每个优先级使用FCFS。缺点：也会饿死</p></li><li><p>Multi-level Feedback Algorithm，循环遍历优先级队列，且时间片越来越长</p></li><li><p>Guaranteed Scheduling，保证调度，保证每个进程都能分到1/n的CPU。缺点：其实不公平</p></li><li><p>Lottery Scheduling，彩票调度</p></li></ol><h2 id="内存调度">内存调度</h2><h3 id="存储层次">存储层次</h3><ol style="list-style-type: decimal"><li><p>理想的内存：大、快、非易失性、便宜</p></li><li><p>实际的内存：小内存快速，昂贵，易失；大内存慢，便宜、非易失</p></li></ol><h3 id="地址空间">地址空间</h3><ol style="list-style-type: decimal"><li><p>每个进程有自己的地址空间，独立于于其他进程的空间</p></li><li><p>动态定位：将进程的地址空间放在内存的不同部分</p></li></ol><h3 id="内存分配">内存分配</h3><h4 id="内存管理的方法">内存管理的方法</h4><ol style="list-style-type: decimal"><li><p>外部碎片：进程被交换进物理内存和交换出物理内存，时间长了会形成很多空洞 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200310160236.png" /></p></li><li><p>使用bitmap进行内存管理 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200310160506.png" /></p><ol style="list-style-type: decimal"><li>分配单元越小，bitmap越大</li><li>寻找一个连续的空块是很慢的</li></ol></li><li><p>使用链表进行内存管理 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200310160750.png" /></p><ol style="list-style-type: decimal"><li>使用链表记录内存分配情况</li></ol></li></ol><h4 id="空闲块的选择">空闲块的选择</h4><ol style="list-style-type: decimal"><li><p>First Fit：选择第一个可用的空洞。缺点：创建更多的空洞</p></li><li><p>Next Fit：从上一个选择的空洞开始继续向下寻找。缺点：比First Fit的效果还差</p></li><li><p>Best Fit。缺点：创建不可用的小空洞</p></li><li><p>Worst Fit。缺点：减少了大型进程能够运行的空洞</p></li><li><p>Quick Fit：为一些常见的请求大小维护单独的列表</p></li></ol><h4 id="overlaying">overlaying</h4><ul><li>可以将程序分割成小的片段，交换片段由操作系统完成，但程序员需要把程序手动分割成片段，这提高了编程的复杂度 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200310210619.png" /></li></ul><h3 id="虚拟内存">虚拟内存</h3><ol style="list-style-type: decimal"><li><p>虚拟内存提供足够的内存给用户所需，所以一般虚拟内存地址空间大于物理内存地址空间</p></li><li>分页是用来实现虚拟内存的一种方式<ul><li>pages:被分割的虚拟内存单元</li><li>page frames:对应的位于物理内存的单元</li></ul></li><li><p>page会轮流被装载到物理内存中，产生的映射存储在page table，page table需要装载到物理内存中，寻找一个没被映射到物理内存的page会产生一次page fault</p></li><li>MMU（memory manangement unit）将虚拟地址翻译为物理地址 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200311112016.png" /><ul><li>TLB是MMU中的一块高速缓存，在翻译过程中首先寻找TLB <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200311120145.png" /></li></ul></li></ol><h4 id="多级page-table">多级page table</h4><ol style="list-style-type: decimal"><li><p>单极页表需要连续的内存空间存储页表项，并且大部分页表项是未使用的</p></li><li><p>多级页表使用一个额外的页表项作为目录，并且只需装载需要的部分page table进入内存中</p></li></ol><h4 id="反转页表inverted-page-tables">反转页表（Inverted Page Tables）</h4><ol style="list-style-type: decimal"><li><p>每个页表项是哈希索引，哈希索引每一项指向虚拟内存到物理内存的映射，哈希索引的大小与物理内存页的数量相同。所以具有更小的体积，但是需要维护额外的哈希链开销</p></li><li><p>因为一个物理页不可能有多个共享虚拟地址。解决这个问题的方法是允许页表包含一个虚拟地址到物理地址的映射，这意味着对未被映射的虚拟地址的引用会导致页错误</p></li></ol><h3 id="页面置换算法">页面置换算法</h3><ol style="list-style-type: decimal"><li><p>Random page replacement：随机替换一个页面</p></li><li><p>First in First Out：替换存在物理内存中最久的page</p></li><li>Not Recently Used：维护两个标记位，一个标记位R标识对象是否被使用过，另一个标记为M标记对象是否被修改过，当一个对象在缓存中被找到时，R置为1，当一个对象被修改，M置为1，优先级如下。该算法认为最近被使用过的对象比最近被修改过的对象更重要<ul><li><ol start="3" style="list-style-type: decimal"><li>referenced, modified</li></ol></li><li><ol start="2" style="list-style-type: decimal"><li>referenced, not modified</li></ol></li><li><ol style="list-style-type: decimal"><li>not referenced, modified</li></ol></li><li><ol start="0" style="list-style-type: decimal"><li>not referenced, not modified &gt; 当缓存已满则按照从下到上的优先级替换page</li></ol></li></ul></li><li>Least Recently Used：替换掉页面中最久没被使用过的page，使用一个链表，如果一个page被访问且在链表中，则将其移到链表头部，如果不在链表中，则插入到链表头部，如果链表满了，则选择移除链表最尾的page<ul><li>老化算法：越近使用权重越大 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200311152650.png" /></li></ul></li><li><p>Not Frequently Used： 最不常用算法，使用一个计数器来记录页面使用状况</p></li><li><p>Working Set：保留最近的工作集页面</p></li></ol><h2 id="文件系统">文件系统</h2><h3 id="文件系统布局">文件系统布局</h3><ol style="list-style-type: decimal"><li><p>MBR（(Master Boot Record）在第0个扇区，用于启动计算机</p></li><li><p>partition table用于给出每个分区的开始与结束地址，并将其中一个分区标记为激活</p></li><li><p>每一个分区有自己的文件系统，并且开头为一个boot block &gt; 这个boot block包含一个小程序，引导操作系统进入该分区</p></li><li><p>操作系统启动时，BIOS读取MBR，然后定位激活的分区，读取分区的boot block并执行</p></li></ol><h3 id="文件实现">文件实现</h3><ul><li>文件的实现指的是追踪每个文件位于哪一硬盘块中</li></ul><h4 id="连续分配">连续分配</h4><ol style="list-style-type: decimal"><li><p>使用连续的块存储每一个文件</p></li><li><p>优点：实现简单，只需要记录文件起始位置与长度，读取性能很好</p></li><li><p>缺点：产生磁盘碎片，并且需要预先知道文件的最大大小，否则文件大小无法增长</p></li><li><p>Good for CD-ROMs, DVDs and other write-once optical media</p></li></ol><h4 id="linked-list-allocation">Linked List Allocation</h4><ol style="list-style-type: decimal"><li><p>用链表链接一串硬盘块来存储文件，块可能存储在硬盘的各个位置，每个块的第一个字指向下个文件块的位置 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200311161305.png" /></p></li><li><p>优点：没有外部碎片，只需要记录文件的开始块，文件可以无限增长，顺序读取快</p></li><li><p>缺点：随机访问慢，块中的数据量不是2的幂</p></li><li>改进：<ol style="list-style-type: decimal"><li>Linked List Allocation Using FAT：使用硬盘每个分区的第一个扇区来存储FAT（File Allocation Table），即把每个文件块的指针单独存放在一个文件用作索引<ol style="list-style-type: decimal"><li><p>FAT需要装载到内存中以减少硬盘寻道</p></li><li><p>FAT的一个条目包含文件块所在的位置以及下一个文件块索引所在的位置</p></li><li><p>优点：整个磁盘块可以用来存储文件数据，只需要记录文件索引的开始块</p></li><li><p>缺点：需要把FAT加载到内存中</p></li></ol></li><li>Indexed Allocation (i-Node)：将文件的所有指针放在一个位置（i节点），所有文件都有自己的i节点 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200311163322.png" /><ol style="list-style-type: decimal"><li><p>在打开文件的时候只需要把该文件的i节点加载进内存</p></li><li><p>所有的目录条目只需要存放i节点地址即可</p></li><li><p>优点：支持直接访问，没有外部碎片，只需要文件对应的i节点加载进内存</p></li><li><p>缺点：需要额外的空间开销存放index</p></li></ol></li></ol></li></ol><h2 id="io控制">I/O控制</h2><ol style="list-style-type: decimal"><li><p>每一个控制寄存器有特殊的I/O端口</p></li><li><p>特别的I/O指令用于读/写这些控制寄存器</p></li></ol><h3 id="separate-io-and-memory-space">Separate I/O and memory space</h3><h3 id="memory-mapped-io">Memory-mapped I/O</h3><ol style="list-style-type: decimal"><li><p>优点：无需特别的指令来读写控制寄存器，无需特别的保护机制来保护控制寄存器不受用户的直接访问</p></li><li><p>缺点：如果控制寄存器的值是缓存的会导致问题。</p></li></ol><h3 id="io中断">I/O中断</h3><ul><li>使用DMA来作为I/O设备与CPU的中转站，一次传输多个字符，以防CPU被频繁打断</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冯诺伊曼计算机模型&quot;&gt;冯·诺伊曼计算机模型&lt;/h2&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>nginx+webpack使用vue-router去除链接的#</title>
    <link href="http://yubiao-li.gitee.io/2020/02/19/nginx-webpack%E4%BD%BF%E7%94%A8vue-router%E5%8E%BB%E9%99%A4%E9%93%BE%E6%8E%A5%E7%9A%84/"/>
    <id>http://yubiao-li.gitee.io/2020/02/19/nginx-webpack%E4%BD%BF%E7%94%A8vue-router%E5%8E%BB%E9%99%A4%E9%93%BE%E6%8E%A5%E7%9A%84/</id>
    <published>2020-02-19T11:32:23.000Z</published>
    <updated>2020-02-22T11:52:09.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2><ul><li>Vue项目中使用了Vue-router作为路由来实现页面跳转，但是在浏览器url处却会有hash值显示，即我们看到的'#'符号，那么怎么去除这个难看的'#'，为了解决这个问题有了这篇文章</li></ul><h2 id="步骤">步骤</h2><h3 id="单页面应用">单页面应用</h3><ol style="list-style-type: decimal"><li><p>vue-router在创建router的时候将模式设置为history，如下，详见<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    mode: <span class="string">'history'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    routes: [...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li><li><p>此时即可去除掉讨人厌的'#'啦，但是接下来会产生问题：刷新页面后会显示404找不到页面。这是因为浏览器在发送请求的时候不会携带#后面的值，但是我们隐藏了#后使得hash值看起来像是url的一部分，浏览器根据这个url来请求当然找不到页面了。所以要对webpack和nginx进行一些配置</p></li><li><p>修改webpack.config.js文件，在output项中加上publicPath: '/',修改后如下。表示寻找资源的路径为根目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">output: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 新增</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    filename: <span class="string">'bundle.js'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)   <span class="comment">// 打包后文件生成的路径</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure></li><li><p>在本地调试应用的时候，需要给webpack.config.js中的devServer项加上一个配置项historyApiFallback。这个选项表示为如果路由页面找不到的话要怎么处理，此处表示为若找不到页面则加载index.html。此时上面设置的publicPath就起作用了，因为寻找文件是根据相对publicPath的路径来找的，如果没有设置则会把当前hash当成publicPath，就会产生找不到index.html的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    historyApiFallback: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        index: <span class="string">'/index.html'</span> <span class="comment">//与output的publicPath有关(HTMLplugin生成的html默认为index.html)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure></li><li><p>在部署到服务器的时候，也是同样的原理设置nginx.cofig文件，使用try_files来表示用index.html替换掉找不到的uri</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">location / &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        try_files $uri $uri/ /index.html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure></li></ol><h3 id="多页面应用">多页面应用</h3><ol style="list-style-type: decimal"><li><p>对于多页面应用，我们希望能够实现访问 <code>域名/A</code>可以去到A页面， <code>域名/B</code>去到B页面，这时需要在设置vue-router的时候添加一个base属性。如果是A页面则base为A</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    mode: <span class="string">"history"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    base:<span class="string">"main"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure></li><li><p>在webpack.config.js设置打包生成的路径，最终生成的目录应该为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">├── A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">│   ├── index.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">│   └── index.js</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">└── B</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    ├── index.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    └── index.js</span></pre></td></tr></table></figure></li><li><p>为了在本地调试能够根据url值跳转到对应的页面，可以使用webpack devServer的historyApiFallback。注意to的值必须以/开头，否则无效。同样需要加上publicPath，此处不再赘述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    historyApiFallback: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        rewrites: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            &#123; <span class="attr">from</span>: <span class="regexp">/^\/main/</span>, <span class="attr">to</span>: <span class="string">'/main/main.html'</span> &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            &#123; <span class="attr">from</span>: <span class="regexp">/./</span>, <span class="attr">to</span>: <span class="string">'/index/index.html'</span> &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr></table></figure></li><li><p>在nginx的配置路由。修改nginx.conf文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    root /root/test/;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    location /A &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        index index.html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        try_files $uri $uri/ /A/index.html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    location /B &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        index index.html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        try_files $uri $uri/ /B/index.html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol><h3 id="自此就配置完成了但是这个方法还有一个小问题就是无论输入什么样的路由都不会出现404页面都会重定向到index.html页面所以需要在router的路由规则加多一条-path-component-notfoundcomponent-具体官方文档写得很清楚了这里就不一一赘述">自此就配置完成了，但是这个方法还有一个小问题就是，无论输入什么样的路由，都不会出现404页面，都会重定向到index.html页面。所以需要在router的路由规则加多一条<code>{ path: '*', component: NotFoundComponent }</code>，具体官方文档写得很清楚了，这里就不一一赘述</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;问题背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vue项目中使用了Vue-router作为路由来实现页面跳转，但是在浏览器url处却会有hash值显示，即我们看到的&#39;#&#39;符号，那么怎么去除这个难看的&#39;#&#39;，为了解决这个问题有了这篇文章&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
    
    
      <category term="运维" scheme="http://yubiao-li.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>centos下nginx+uwsgi+django搭建后端服务器</title>
    <link href="http://yubiao-li.gitee.io/2020/02/08/centos%E4%B8%8Bnginx-uwsgi-django%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yubiao-li.gitee.io/2020/02/08/centos%E4%B8%8Bnginx-uwsgi-django%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-02-08T04:28:49.000Z</published>
    <updated>2020-05-25T03:20:46.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在本地运行Django后端相信作为一个Django开发者来说不是问题了，但在完成项目后如何将我们的劳动成果部署在服务器上，则需要一番操作，本文使用nginx+uwsgi+django来搭建后端环境，服务器系统版本是centos7.2，使用的是root用户（并不推荐）</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>安装nginx <code>yum install nginx</code>，如果你没有办法通过这条命令安装ngin，请自行百度寻找原因</p></li><li><p>查询80端口是否被占用 <code>netstat -tlnp|grep 80</code>，如果有程序占用则kill掉 <code>kill xxx</code></p></li><li><p>启动nginx <code>/usr/sbin/nginx</code>，在浏览器访问自己的服务器ip，如果出现下图则表示nginx启动成功<br> <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200208124151.png" alt=""></p></li><li><p>安装uwsgi，注意uwsgi是python的一个库，所以使用pip进行安装 <code>pip install uwsgi --no-cache-dir</code>，如果安装uwsgi报错请百度</p></li><li><p>新建一个django项目hello（或者使用现有的项目），首先验证项目能否正常访问：<code>python manage.py runserver 0.0.0.0:8000</code>后访问服务器ip:8000。然后停止运行django项目。</p></li><li><p>假设该项目目录为/root/hello，尝试使用uwsgi运行服务 <code>uwsgi --http :8008 --chdir /root/hello --wsgi-file hello/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:8000</code>，此时在浏览器输入ip:8008，出现Django欢迎界面表示uwsgi+django成功<br> 常用选项如下：</p><ul><li><p>|参数|描述|<br>|-|-|<br>|http|协议的类型与端口号<br>|processes|开启的进程的数量<br>|workers|开启的进程数量，等同于processes<br>|chdir|指定运行目录<br>|wsgi-file|载入wsgi-file，相对路径<br>|stats|在指定的地址上，开启状态服务<br>|threads|每个worker运行的线程。<br>|master|允许主进程存在（enable master process）<br>|daemonize|使进程在后台运行，并将日志打到指定的日志文件<br>|pidfile|指定pid文件的位置，记录主进程的pid号<br>|vacuum|当服务器退出的时候自动清理环境，删除pid文件</p></li><li><p>由于参数很多，我们可以将它们写入到一个配置文件中，任意位置新建uwsgi.ini文件，内容如下，然后运行 <code>uwsgi --ini /root/uwsgi/uwsgi.ini</code>，同样在浏览器测试输入ip:8000查看是否成功</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里由于是使用浏览器进行测试，使用http协议，之后改为socket</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> = :<span class="number">8000</span>    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">chdir</span> = /root/hello</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">wsgi-file</span> = hello/wsgi.py</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span> = hello.wsgi</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">master</span> = <span class="literal">true</span>        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">threads</span> = <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># uwsgi进程号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> = /root/uwsgi/uwsgi.pid </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存放日志文件路径</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="attr">daemonize</span> = /root/uwsgi/uwsgi.log</span></pre></td></tr></table></figure></li></ul></li><li><p>修改nginx配置文件 /etc/nginx/nginx.conf，并保存，修改之前写的uwsgi.ini中的http为socket，保存</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">http &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    server &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        listen      <span class="number">80</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        server_name   xxx; <span class="comment"># 服务器域名或ip</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        location / &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            include uwsgi_params;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">#这行指定uwsgi开放的数据交换接口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">#这里与配置uwsgi的ini文件中module内容一致</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            uwsgi_param UWSGI_SCRIPT hello.wsgi;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">#这里与配置uwsgi的ini文件中chdir内容一致</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            uwsgi_param UWSGI_CHDIR  /root/hello;      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        location /static &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            root /root/hello/static;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        error_page <span class="number">404</span> /<span class="number">404.</span>html;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            location = /<span class="number">40</span>x.html &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># error_page 500 502 503 504 /50x.html;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#     location = /50x.html &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># &#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>关闭之前打开的uwsgi和nginx进程（确认80端口和8000端口无进程占用），运行命令 <code>uwsgi --ini /root/uwsgi/uwsgi.ini &amp; /usr/sbin/nginx</code>，在浏览器访问 <code>http://ip</code>，看到django页面即成功</p></li></ol><h2 id="后期运维"><a href="#后期运维" class="headerlink" title="后期运维"></a>后期运维</h2><ol><li><p>nginx 日志文件位于/var/log/nginx/目录下</p></li><li><p>uwsgi 日志文件自定义于uwsgi.ini文件的daemonize字段</p></li><li><p>每次修改nginx.conf配置文件需要重启服务</p></li></ol><h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li><p>证书包含以下信息</p><ul><li>证书的发布机构</li><li>证书的有效期</li><li>公钥</li><li>证书所有者</li><li>签名所用的算法，即加密算法，配合公钥用于加密明文</li><li>指纹及其指纹算法。指纹用于确保证书没有被修改过，原理就是发布者在发布证书的同时根据指纹算法计算证书的hash值并和证书放在一起，使用者在使用证书的时候也计算一下hash，如果对的上证明没被修改过。注意，这个指纹与算法使用了CA证书机构的私钥用签名算法加密了后才和证书放在一起</li></ul></li><li><p>请求过程<br> <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200525104812.png" alt=""></p> <!-- <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/742678/201612/742678-20161204233935881-538260881.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> --><ol><li><p>客户端向一个https网站发出请求</p></li><li><p>服务器将证书发给客户端进行校验，证书包含了其公钥。这里说明一下客户端怎么验证证书有效</p><ol><li>首先在本机寻找是否有这个证书上的ca的根证书，如果有继续下一步。没有则警告</li><li>使用ca根证书的公钥对服务器证书的指纹和算法进行解密</li><li>得到指纹算法后，用这个指纹算法计算一遍证书的摘要获得指纹</li><li>将计算出的指纹与证书带的指纹做对比</li></ol></li><li><p>校验成功后，客户端会生成一个随机串（对称加密的密钥）使用证书的公钥加密后发送给服务器</p></li><li><p>服务器用自己的私钥解密得到这个随机串（对称加密的密钥）</p></li><li><p>此后使用这个随即串进行对称加密</p></li></ol></li><li><p>为什么不一直使用非对称加密而要生成一个对称加密的密钥</p><ul><li>非对称加密的效率比对称加密低</li></ul></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>在nginx.conf中添加如下规则即可</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    listen         <span class="number">443</span> ssl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    server_name  domain.com;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    charset <span class="string">'utf-8'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#证书文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    ssl_certificate     xxx.crt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#私钥文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    ssl_certificate_key xxx.key;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    ssl_protocols       TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在本地运行Django后端相信作为一个Django开发者来说不是问题了，但在完成项目后如何将我们的劳动成果部署在服务器上，则需要
      
    
    </summary>
    
    
    
      <category term="运维" scheme="http://yubiao-li.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>django跨域访问解决</title>
    <link href="http://yubiao-li.gitee.io/2020/01/03/django%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3/"/>
    <id>http://yubiao-li.gitee.io/2020/01/03/django%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3/</id>
    <published>2020-01-03T15:07:40.000Z</published>
    <updated>2020-03-25T15:15:30.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><ul><li>CSRF与XSS：<ul><li><p>CSRF（跨域请求伪造）：黑客网站盗用用户在A网站的cookie向A网站发送请求 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20200325120601.png" /></p><ul><li>如何防御：<ol style="list-style-type: decimal"><li><p>Token验证（使用最多）：服务器发送一个Token给客户端，客户端提交的表单请求要携带这个Token，如果Token不合法服务器拒绝这个请求</p></li><li><p>隐藏令牌：把Token隐藏在http的head头中，本质上与方法一没有太大区别</p></li><li><p>Referer验证：Referer指的是页面请求来源。意思是只接受本站的请求，服务器才做响应</p></li></ol></li></ul></li><li><p>XSS（跨域脚本攻击）：不需要你做任何登录认证，通过合法的操作（如在url输入、在评论框输入），向你的页面注入脚本（js、html）。主要分反射型和存储型攻击</p><ul><li>如何防御：<ol style="list-style-type: decimal"><li><p>编码：对用户输入的数据进行HTML Entity编码，将脚本转换为纯文本，对特殊符号转义处理</p></li><li><p>过滤：移除用户输入数据的Script节点、iframe节点</p></li></ol></li></ul></li></ul></li><li>同源策略：同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓跨域访问指前端发起网络请求时与后端不在同一个ip下或者不在同一个端口下，如：<ul><li>127.0.0.1:8080 到 127.0.0.1:8000</li><li>127.0.0.1 到 127.0.0.2</li></ul><p>都属于跨域访问。</p></li><li>同源策略限制内容有：<ul><li>Cookie、LocalStorage、IndexedDB等存储性内容</li><li>DOM节点</li><li>AJAX请求 跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</li></ul></li><li>但是有三个标签是允许跨域加载资源的：<ul><li>img</li><li>link</li><li>script</li></ul></li></ul><h2 id="项目环境">项目环境</h2><ul><li>Vue</li><li>Nginx</li><li>Django</li></ul><h2 id="跨域解决方案">跨域解决方案</h2><h3 id="jsonp">jsonp</h3><ul><li><p>原理：利用script标签没有跨域限制的漏洞，网页可以得到其他来源动态产生的json数据。但是仅支持get方法具有局限性，不安全可能会遭受XSS攻击</p></li><li><p>实现流程：创建一个script标签，并设置一个回调函数，类似于前端设置好一个函数，后端返回一个执行该函数的命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> frame = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    frame.src = url;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    $(<span class="string">'body'</span>).append(frame);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预先设置好的回调函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">res</span>)</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    alert(res.message+res.name+<span class="string">'你已经'</span>+res.age+<span class="string">'岁了'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/article-list'</span>, (req, res) =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(req.query, <span class="string">'123'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> data = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        message: <span class="string">'success!'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        name: req.query.name,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        age: req.query.age</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    data = <span class="built_in">JSON</span>.stringify(data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    res.end(<span class="string">'func('</span> + data + <span class="string">')'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li></ul><h3 id="cors">CORS</h3><ul><li><p>原理：服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p></li><li>option请求：<ol style="list-style-type: decimal"><li><p>在正式的请求前，浏览器会根据需要，发起一个“PreFlight”（也就是option请求），来让服务器返回允许的方法（如get、post），被跨域访问的Origin，或者是否需要Credentials（认证信息）</p></li><li>如果是简单请求则不会触发PreFlight，浏览器对简单请求的要求是：<ol style="list-style-type: decimal"><li>只能是GET、HEAD、POST方法</li><li>除了浏览器自己在http头上加的信息（如Connection、User-Agent），开发者只能加：Accept、Accept-Language、Content-Type</li><li>ContentType只能取这几个值：<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li><li>服务器可以设置Access-Control-Max-Age来控制浏览器在多长时间内无需再发送预检请求，从而减少不必要的预检请求</li></ol></li></ol></li><li>解决方案<ol style="list-style-type: decimal"><li><p>安装django-cors-headers，<code>pip install django-cors-headers</code></p></li><li><p>修改 <code>setting.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'corsheaders'</span>，</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">] </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加中间件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,<span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>, <span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,<span class="comment"># 新增 ✔</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 注意顺序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>, </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,<span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,<span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>, <span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,<span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,<span class="comment"># 默认</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域增加忽略</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果报错请注释这一句</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_WHITELIST = (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'*'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">CORS_ALLOW_METHODS = (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'DELETE'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'OPTIONS'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'PATCH'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'PUT'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'VIEW'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">CORS_ALLOW_HEADERS = (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'XMLHttpRequest'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'X_FILENAME'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'accept-encoding'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'authorization'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'content-type'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'dnt'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'origin'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'user-agent'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'x-csrftoken'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'x-requested-with'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署到云服务上必备</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span></pre></td></tr></table></figure></li><li><p>如果需要携带cookie跨域，还需要在设置一下axios <code>axios.defaults.withCredentials = true</code>，切记cookie的domain要和发送请求的origin一致，不然会出现发送请求没有携带cookie的问题（注：localhost与127.0.0.1不等价）</p></li></ol></li></ul><h3 id="postmessage">postMessage</h3><ul><li>原理：postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：<ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul></li><li><p>实现方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// a.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"frame"</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> //等它加载完触发一个事件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">//内嵌在http://localhost:3000/a.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="actionscript">        frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.data) <span class="comment">//我不爱你</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><h3 id="使用代理服务器">使用代理服务器</h3><ul><li>nginx<ol style="list-style-type: decimal"><li><p>修改nginx配置文件nginx.conf</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    listen       <span class="number">81</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    server_name  www.domain1.com;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    location / &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        proxy_pass   http://www.domain2.com:<span class="number">8080</span>;  <span class="comment">#反向代理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        index  index.html index.htm;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  <span class="comment">#当前端只跨域不带cookie时，可为*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        add_header Access-Control-Allow-Credentials true;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSRF与XSS：
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSRF（跨域请求伪造）：黑客网站盗用用户在A网站的cookie向A网站发送请求 &lt;img src=&quot;https://raw.githubusercontent.
      
    
    </summary>
    
    
    
      <category term="Django" scheme="http://yubiao-li.gitee.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>C++ 解析JSON文件</title>
    <link href="http://yubiao-li.gitee.io/2019/12/28/C-%E8%A7%A3%E6%9E%90JSON%E6%96%87%E4%BB%B6/"/>
    <id>http://yubiao-li.gitee.io/2019/12/28/C-%E8%A7%A3%E6%9E%90JSON%E6%96%87%E4%BB%B6/</id>
    <published>2019-12-28T09:58:22.000Z</published>
    <updated>2019-12-28T10:17:56.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><ul><li>今天遇到了一个使用C++读取json格式文本文档的需求，在python中是十分简单的一个需求，没想到要在C++实现的时候却卡了壳弄了一个下午找不到方法，特此记录一下解决方案，供各位参考</li></ul><h2 id="使用库">使用库</h2><ul><li><p>cJSON</p><ol style="list-style-type: decimal"><li><p>cJSON是github开源的一个用于解析JSON字符串的库，相比其他库起来不需要麻烦的配置过程，只需要将一个.c文件和一个.h文件包含到源代码目录，在代码中<code>#include&quot;cJSON.h&quot;</code>即可</p></li><li><p>cJSON是使用链表来存储数据的，其访问方式很像一颗树。每一个节点可以有兄弟节点，通过next/prev指针来查找，它类似双向链表；每个节点也可以有孩子节点，通过child指针来访问，进入下一层。只有节点是对象或数组时才可以有孩子节点</p></li><li><p>type是键（key）的类型，一共有7种取值，分别是：False，Ture，NULL，Number，String，Array，Object。若是Number类型，则valueint或valuedouble中存储着值。若期望的是int，则访问valueint，若期望的是double，则访问valuedouble，可以得到值。若是String类型的，则valuestring中存储着值，可以访问valuestring得到值。</p></li><li><p>string中存放的是这个节点的名字，可理解为key的名称</p></li></ol></li></ul><h2 id="使用教程">使用教程</h2><ol style="list-style-type: decimal"><li><p>在github上下载<a href="https://github.com/DaveGamble/cJSON" target="_blank" rel="noopener">cJSON项目</a></p></li><li><p>将项目中的<code>cJSON.c</code>与<code>cJSON.h</code>复制到自己的项目目录下，<code>#include&quot;cJSON.h&quot;</code>即可</p></li><li><p>示例代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cJSON.h"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JsonTest</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="class">&#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">char</span> cName[<span class="number">32</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">float</span> fValue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestJsonObject</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//测试cJson 创建Json对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    JsonTest jsonObject = &#123;<span class="number">1</span>, <span class="string">"geekCode"</span>, <span class="number">0.2f</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    cJSON *root, *object;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">char</span> *result; <span class="comment">//生成的结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    root = cJSON_CreateObject();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    object = cJSON_CreateObject();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddNumberToObject(object, <span class="string">"id"</span>, jsonObject.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddStringToObject(object, <span class="string">"name"</span>, jsonObject.cName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddNumberToObject(object, <span class="string">"value"</span>, jsonObject.fValue);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddNumberToObject(root, <span class="string">"id"</span>, jsonObject.id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddStringToObject(root, <span class="string">"name"</span>, jsonObject.cName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddNumberToObject(root, <span class="string">"value"</span>, jsonObject.fValue);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    cJSON_AddItemToObject(root, <span class="string">"object"</span>, object);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    result = cJSON_Print(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    cJSON_Delete(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"生成Json：\n%s\n"</span>, result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//解析Json对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    root = cJSON_Parse(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!root)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error before: [%s]\n"</span>, cJSON_GetErrorPtr());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    object = cJSON_GetObjectItem(root, <span class="string">"object"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!object)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        cJSON_Delete(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    JsonTest objectJson;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">    JsonTest rootJson;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//解析item</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    cJSON *item;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"解析过程：\n"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//解析到objectJson</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(object, <span class="string">"id"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Item: type=%d, key is %s, valueint=%d\n"</span>, item-&gt;type, item-&gt;<span class="built_in">string</span>, item-&gt;valueint);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">    objectJson.id = item-&gt;valueint;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(object, <span class="string">"name"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Item: type=%d, key is %s, valuestring=%s\n"</span>, item-&gt;type, item-&gt;<span class="built_in">string</span>, item-&gt;valuestring);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">strcpy</span>(objectJson.cName, item-&gt;<span class="built_in">string</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(object, <span class="string">"value"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"Item: type=%d, key is %s, valuedouble=%2f\n"</span>, item-&gt;type, item-&gt;<span class="built_in">string</span>, item-&gt;valuedouble);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">    objectJson.fValue = item-&gt;valuedouble;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//解析到rootJson</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(root, <span class="string">"id"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">    rootJson.id = item-&gt;valueint;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(root, <span class="string">"name"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">strcpy</span>(rootJson.cName, item-&gt;<span class="built_in">string</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">    item = cJSON_GetObjectItem(root, <span class="string">"value"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">    rootJson.fValue = item-&gt;valuedouble;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//打印解析结果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"解析结果:\nroot:\n"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\tid:%d\n\tname:%s\n\tvalue:%2f\n\t\n"</span>, rootJson.id, rootJson.cName, rootJson.fValue);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"\tobject:\n\t\tid:%d\n\t\tname:%s\n\t\tvalue:%2f\n"</span>, objectJson.id, objectJson.cName, objectJson.fValue);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestRatingJson</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">string</span> jsonStr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">    ifstream jsonFile;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">    jsonFile.<span class="built_in">open</span>(<span class="string">"../rating.json"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">stringstream</span> jsonStream;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">    jsonStream &lt;&lt; jsonFile.rdbuf();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">    jsonFile.<span class="built_in">close</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">    jsonStr = jsonStream.str();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">    cJSON *root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">    cJSON *item;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">    cJSON *from;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">string</span> s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">    root = cJSON_Parse(jsonStr.c_str());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = cJSON_GetArraySize(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">            item = cJSON_GetArrayItem(root, i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">            from = cJSON_GetObjectItem(item, <span class="string">"from"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">            s = from-&gt;valuestring;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">catch</span> (<span class="keyword">const</span> <span class="built_in">std</span>::exception &amp;e)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="string">'\n'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">    cJSON_Delete(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// TestJsonObject();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">    TestRatingJson();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>其中rating.json文件可以前往<a href="https://mailscuteducn-my.sharepoint.com/:u:/g/personal/201730682317_mail_scut_edu_cn/EWrfLF0r-o1Ku4eBY2Dz9MIBQflZTjIr_F3v5VPN_pmDaA?e=MHkzIY" target="_blank" rel="noopener">这里</a>下载</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今天遇到了一个使用C++读取json格式文本文档的需求，在python中是十分简单的一个需求，没想到要在C++实现的时候却卡了壳弄了一个下午找不到方法，特此记录一下解决方案，供各位参考&lt;/li&gt;
&lt;/ul&gt;
&lt;h2
      
    
    </summary>
    
    
    
      <category term="C++" scheme="http://yubiao-li.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-计算机图形学复习提纲</title>
    <link href="http://yubiao-li.gitee.io/2019/12/20/2019-SCUT-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2019/12/20/2019-SCUT-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2019-12-20T08:19:07.000Z</published>
    <updated>2019-12-30T03:20:06.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图形系统和模型">图形系统和模型</h2><h3 id="图形流水线">图形流水线</h3><ul><li>计算机图形学分为两个阶段：<ol style="list-style-type: decimal"><li><p>从模型到屏幕空间的几何建模</p></li><li><p>在屏幕空间中创建所需的图像</p></li></ol></li></ul><p>图形流水线分为两个部分</p><h4 id="modeling-pipeline">Modeling Pipeline</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191220182908.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>3D Model Coordinates<ul><li>您可以定义模型的各个部分，无论它们的坐标是什么</li><li>您使用建模转换将模型的各个部分放在一起，然后将模型放置在一个世界空间中</li></ul></li><li>3D World Coordinates<ul><li>场景的所有部分都被放在同一个3D坐标系统中</li><li>场景是独立于观察者的</li></ul></li><li>3D Eye Coordinate System<ul><li>当有一个观察者与一个观察者上下文，这个场景就成为图像</li><li><p>放置在世界空间的一个观察者（或摄像机）拥有一个位置与方向</p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191220184106.png" /></div></li></ul></li><li>2D Eye Coordinates<ul><li><p>透视投影与正交投影</p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191220184248.png" /></div><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191220184315.png" /></div></li><li><p>将每个点投影到平面上对应的点使得场景被转换到这个坐标系</p></li><li><p>在这个视图中深度信息会丢失</p></li></ul></li><li>2D Screen Coordinates<ul><li><p>2D eye coordinates 被放缩到屏幕维度</p></li><li><p>产生的实际坐标值被截断为屏幕上像素地址匹配的整数坐标</p></li></ul></li></ul><h4 id="rendering-pipeline">Rendering Pipeline</h4><blockquote><p>The modeling pipeline 只是在不同的空间映射顶点，所有顶点最终经过处理，在帧缓冲中形成一个图像</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191222221406.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="三色定理">三色定理</h3><ul><li>人类视觉系统有两种传感器<ul><li>杆状细胞（Rods）：单色，夜视，感知亮度</li><li>锥状细胞（Cones）：颜色敏感</li></ul></li><li><p>人眼对红、绿、蓝最为敏感，人的眼睛像一个三色接收器的体系，大多数的颜色可以通过红、绿、蓝三色按照不同的比例合成产生。同样，绝大多数单色光也可以分解成红、绿、蓝三种色光，这是色度学的最基本的原理，也称三原色原理</p></li><li><p>屏幕是一个发射显示器，而不是反射</p></li></ul><h2 id="图形学编程">图形学编程</h2><h3 id="opengl-介绍"><a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">OpenGL</a> 介绍</h3><ul><li>OpenGL是一个状态机，它的函数有两种类型<ul><li>图元生成</li><li>状态改变</li></ul></li></ul><h3 id="glslopengl-shading-language">GLSL(OpenGL Shading Language)</h3><ul><li>GLSL是一种类C风格的着色器语言</li></ul><h3 id="opengl图元">OpenGL图元</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223101912.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="vaovertex-array-object">VAO(Vertex Array Object)</h3><ul><li>绑定了所有需要的顶点数据（位置，颜色。。。）</li></ul><h3 id="vbovertex-buffer-object">VBO(Vertex Buffer Object)</h3><ul><li>缓冲对象让我们可以一次性传输大量数据到GPU</li></ul><h2 id="几何对象和变换">几何对象和变换</h2><ul><li><p>反射向量 <img src="https://img-blog.csdn.net/20180307124330611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluaHVuMjAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" /></p></li><li><p>平面方程 <span class="math display">\[(A,B,C)\cdot (x-x_0,y-y_0,z-z_0) = 0 \]</span></p><p><span class="math display">\[ Ax + By + Cz + D = 0 \]</span></p></li><li>碰撞检测算法<ol style="list-style-type: decimal"><li><p>比较两个包围球或者包围盒：两个球心距离小于两个半径的和，则可能碰撞</p></li><li><p>可能碰撞时，一个物体的每个三角形与另一个包围体比较，假设是包围球：比较三角形的每个顶点，如果顶点与球心距离小于三角形最长边 + 球的半径，则可能碰撞；或者比较三角形外接圆与包围球，如果外接圆心与球心的距离小于外接圆半径 + 球的半径，则可能碰撞</p></li><li><p>比较两个三角形是否碰撞：一个三角形的每个顶点是否在另一个三角形平面的一边，即<span class="math inline">\(Ax + By + Cz + D &gt; 0\)</span> 或 <span class="math inline">\(Ax + By + Cz + D &lt; 0\)</span>，如果在一边则不会碰撞，否则可能发生碰撞</p></li><li><p>判断一个三角形是否与另一个三角形相交：一个三角形的边<span class="math inline">\(Q_0Q_1\)</span>与另一个三角形平面的交点Q是否在另一个三角形<span class="math inline">\(P_0P_1P_2\)</span>里面，即以下三个不等式同时成立 <span class="math display">\[ N \cdot ((P1-P0) × (Q-P0)) &gt; 0 \]</span></p><p><span class="math display">\[ N \cdot ((P2-P1) × (Q-P1)) &gt; 0 \]</span></p><p><span class="math display">\[ N \cdot ((P0-P2) × (Q-P2)) &gt; 0 \]</span> 则Q在三角形<span class="math inline">\(P_0P_1P_2\)</span>里面</p></li></ol></li></ul><h3 id="基本变换">基本变换</h3><h4 id="齐次坐标">齐次坐标</h4><blockquote><p>我们使用齐次坐标来将所有的转换表示为矩阵，并允许它们很容易地组合在一起：<span class="math inline">\(P&#39; = (M3*(M2 *(M1 *P)))\)</span></p></blockquote><ul><li>在齐次坐标，一个3D点可以表示为$ P = (x,y,z,1)^$</li></ul><h4 id="平移">平移</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223142009.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>逆矩阵： $T^{-1}(d_x, d_y, d_z) = T(-d_x, -d_y, -d_z) $</li></ul><h4 id="缩放">缩放</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223142155.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>逆矩阵：<span class="math inline">\(S^{-1}(s_x, s_y, s_z)= S(1/s_x, 1/s_y, 1/s_z)\)</span></li></ul><h4 id="旋转">旋转</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223142253.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>逆矩阵： $ R^{-1}() = R(-) = R^() $</li></ul><h4 id="错切变换">错切变换</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223145653.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="投影和视见变换">投影和视见变换</h2><h3 id="投影矩阵">投影矩阵</h3><h4 id="投影中心在原点">投影中心在原点</h4><p>投影到 z = d 的平面的投影矩阵</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223151851.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="投影中心不在原点">投影中心不在原点</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223152126.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="投影规范化">投影规范化</h3><blockquote><p>使用平移和旋转变换将照相机坐标系下的顶点变换到默认的视见体的内部</p></blockquote><h4 id="平行投影">平行投影</h4><ol style="list-style-type: decimal"><li><p>通过平移把指定视见体的中心移到规范视见体的中心（原点）</p></li><li><p>通过缩放指定的视见体使得它的每条边的长度为2</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223160018.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="透视投影">透视投影</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223163450.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="视见变换">视见变换</h3><ol style="list-style-type: decimal"><li><p>指定眼睛（或者视图参考点）作为原点</p></li><li><p>将视图平面法向量n指定为z轴</p></li><li><p>将视图向量(VUP) v指定为y轴</p></li><li><p>x轴(第三个向量u)可以用叉乘计算:u = v×n <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223171548.png" /></p></li><li><p>将世界坐标系转换为眼睛坐标系 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191223221912.png" /></p></li></ol><h3 id="视口">视口</h3><ul><li><p>视口是窗口的一个你可以在上面绘画的矩形区域</p></li><li><p>默认的视口是整个窗口</p></li><li><p>可以定义一个更小的窗口使得所有绘制被限制在那个区域</p></li><li><p>你可以为每个视口端口使用单独的建模</p></li></ul><h3 id="ctmcurrent-transformation-matrix">CTM（Current Transformation Matrix）</h3><blockquote><p>从概念上讲，有一个4×4的齐次坐标矩阵，即当前变换矩阵(CTM)，它是状态的一部分，适用于沿管道向下传递的所有顶点</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191228142355.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="光照和着色">光照和着色</h2><h3 id="光照概念">光照概念</h3><ul><li><p>光线从光源照射到物体上，透射出反射光、透明光和吸收光(不可见)。</p></li><li><p>反射光包括漫射光和反射光，反射光与物体的材质有关</p></li></ul><h3 id="光照模型">光照模型</h3><ul><li><p>我们使用的是局部光照模型（Local Illumination Model）：光线只来自定义在场景中的光源，忽视被其他物体或者表面反射的光</p></li><li>光照被看作由三个部分组成<ul><li>环境光（Ambient）<ul><li>不关心光照位置</li><li>不关心观察者位置</li><li>不关心表面法向量</li></ul><p><span class="math display">\[ A = L_0 + \sum_{lights}(L_A * C_A) \]</span></p></li><li>漫反射光（Diffuse）<ul><li>区域对光来说是否可见取决于光的角度——光向量与平面法向量的点乘</li></ul><p><span class="math display">\[ D = \sum_{lights}L_D* C_D*(L \cdot N)\]</span></p></li><li>镜面反射光（Specular）<ul><li>取决于反射光与观察方向的角度</li></ul><p><span class="math display">\[ S = \sum_{lights}L_S * C_S * (V \cdot R)^k \]</span></p><ul><li><p>K：感光度，改变光的衰减速率 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191228195233.png" /></p></li><li><p>没有物理基础，但在实践中是可行的</p></li></ul><blockquote><p>另一种光照模型是Blinn-Phong光照模型，唯一不同的地方是计算镜面反射光是使用法向量<strong>点乘</strong>观察方向与入射方向的半角</p></blockquote></li></ul></li><li><p>所有光使用RGB颜色模型</p></li></ul><h3 id="表面定向与材质">表面定向与材质</h3><ul><li>为了使用光照，你必须获得每个顶点的法向量与每个对象的材质</li></ul><h4 id="法向量">法向量</h4><ul><li>可以计算为两个相邻边的外积</li></ul><h3 id="光的属性">光的属性</h3><ul><li>光的类型<ul><li>点光源</li><li>定向光</li><li>聚光</li><li>环境光</li></ul></li><li>光的位置</li><li>光的方向</li><li>聚光灯的方向和截止</li><li>光的衰减</li><li>光的颜色</li></ul><h3 id="光照着色">光照着色</h3><ul><li>计算图形对象各部分的颜色，尤指多边形</li></ul><h4 id="constantflat-shading">Constant(Flat) Shading</h4><ul><li><p>对于多边形只计算其上的一个点，生成的结果被分配给多边形覆盖的所有像素</p></li><li><p>效率很高但通常十分粗糙</p></li><li><p>着色的离散变化（马赫带，Mach band）通常发生在constant shading <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191228202350.png" /></p></li></ul><h4 id="gouraud-smooth-shading">Gouraud (Smooth) Shading</h4><ul><li><p>平面的每一个顶点都进行渲染计算</p></li><li><p>每个顶点都会有一个法向量，或者是由相邻的几个平面求平均得到的法向量</p></li><li><p>平面的其他像素颜色通过对颜色线性插值获取</p></li></ul><h4 id="phong-shading">Phong Shading</h4><ul><li><p>对法向量进行线性插值</p></li><li><p>对每个像素使用局部光照模型</p></li></ul><h3 id="全局光照">全局光照</h3><ul><li><p>不止考虑来自场景中的光，也考虑反射光</p></li><li><p>更复杂，但更真实</p></li><li><p>热辐射、射线追踪</p></li></ul><h2 id="渲染从顶点到片段">渲染——从顶点到片段</h2><h3 id="线段裁剪算法">线段裁剪算法</h3><h4 id="cohen-sutherland-线段裁剪算法">Cohen-Sutherland 线段裁剪算法</h4><ul><li>该算法有4种情况<ol style="list-style-type: decimal"><li><p>线段的两点都在区域内</p></li><li><p>线段的两点都在区域外并且在一条边界的同一侧</p></li><li><p>一个点在区域内一个点在区域外</p></li><li><p>两点都在区域外但不在一条边界的同一侧</p></li></ol></li><li>可以将情况的两点进行编码，然后两点运算来裁剪线段 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229104456.png" /></li></ul><h4 id="梁友栋-barsky-线段裁剪算法">梁友栋-Barsky 线段裁剪算法</h4><blockquote><p>使用参数方程求出与裁剪窗口四条边的交点，通过交点顺序来判断是否需要裁剪</p></blockquote><h4 id="多边形填充区域裁剪">多边形填充区域裁剪</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229110902.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="光栅化">光栅化</h3><ul><li><p>根据一组顶点确定需要着色的像素</p></li><li><p>生成一组片段</p></li><li><p>片段有一个位置(像素位置)和其他属性，比如颜色和纹理坐标，这些属性是通过在顶点上插入值来确定的</p></li></ul><h4 id="dda-算法">DDA 算法</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229112429.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="行扫描转换bresenham-algorithm">行扫描转换——Bresenham Algorithm</h4><ul><li>判断交点更接近<span class="math inline">\(y_i\)</span>还是<span class="math inline">\(y_{i+1}\)</span> <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229153645.png" /></li></ul><h4 id="扫描转换多边形扫描线填充算法">扫描转换多边形——扫描线填充算法</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229155614.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="隐藏面消除">隐藏面消除</h3><h4 id="z-buffer-算法">z-Buffer 算法</h4><ul><li>深度缓冲区与帧缓冲区相同</li><li>保存最近的交点的距离</li></ul><h4 id="画家算法">画家算法</h4><ul><li>从后往前渲染</li><li>对所有多边形进行深度排序</li><li>如果有多个多边形循环重叠，需要把多边形分为多个部分</li></ul><h3 id="反走样">反走样</h3><ul><li>计算线与附近像素方块的重叠比例，像素颜色计算公式<span class="math display">\[\alpha \times current\_color + (1- \alpha) \times existing\_color \]</span></li></ul><h3 id="多边形混叠">多边形混叠</h3><ul><li>像素的颜色取决于多多边形的颜色</li></ul><h2 id="离散技术">离散技术</h2><h3 id="写缓存模式">写缓存模式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229194140.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191229194147.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>重点注意XOR写入模式，即模式6，有如下特性<span class="math display">\[ d = (d \oplus s) \oplus s \]</span></li></ul><h3 id="纹理贴图">纹理贴图</h3><ul><li>凹凸贴图<ul><li><p>在Gouraud shading中，光强度是在顶点处计算的。线上其他像素的强度由两个顶点的强度混合而成</p></li><li><p>在凹凸贴图中，光强度是在每个像素处计算的。使用原始曲面的法线。(注意曲线仍然是用直线近似。)</p></li></ul></li></ul><h2 id="层级建模方法">层级建模方法</h2><h2 id="全局光照-1">全局光照</h2><h3 id="射线追踪">射线追踪</h3><ol style="list-style-type: decimal"><li><p>对于每个射线，寻找最近的阻挡光路的物体</p></li><li><p>计算这个物体的像素颜色</p></li><li><p>可以确定物体的阴影，光线是否会到达那个表面</p></li><li><p>详情借鉴别人的<a href="https://blog.csdn.net/hmbxsy/article/details/80509876" target="_blank" rel="noopener">博客</a></p></li></ol><h3 id="辐射度算法">辐射度算法</h3><ul><li>辐射度算法的原理就是模拟真实世界中的光照原理，在场景中的每个位置收集所有在该位置所能看到的光照信息，然后对这些颜色信息进行汇总处理，作为最终该位置的颜色并对当前的位置进行着色。在现实世界中，这个位置就代表了无穷多个无限小的像素点，但在计算机中却不可能做到这样一点，因此只能进行近似的模拟操作，这就是将几何空间场景进行分割处理，得到一些相对于整个场景来说很小的多边形面片，然后以这些面片为单位来代替现实世界中的无限小的像素点进行渲染着色。当然，如果我们对整个场景分割得越发细小，得到的最终光照效果也就是越好，但随之而来的代价就是渲染的时间越长。<a href="https://blog.csdn.net/pizi0475/article/details/7933752" target="_blank" rel="noopener">讲的不错的一篇博客</a></li></ul><hr /><p>最后附上找到的一个学习OpenGL编程的很好的<a href="https://learnopengl-cn.github.io/" target="_blank" rel="noopener">教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图形系统和模型&quot;&gt;图形系统和模型&lt;/h2&gt;
&lt;h3 id=&quot;图形流水线&quot;&gt;图形流水线&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计算机图形学分为两个阶段：
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;从模型到屏幕空间的几何
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-软件测试与维护复习提纲</title>
    <link href="http://yubiao-li.gitee.io/2019/12/19/2019-SCUT-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2019/12/19/2019-SCUT-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2019-12-19T05:25:45.000Z</published>
    <updated>2019-12-19T09:54:08.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bug">BUG</h2><ol style="list-style-type: decimal"><li>BUG名词解释：软件缺陷指的是系统或系统部件中那些导致系统或部件不能实现其功能或者性能的缺陷。如果在执行中遇到一个缺陷，可能引起系统的失效<ol style="list-style-type: decimal"><li><p>没有做它应该做的事情。</p></li><li><p>做了不该做的事。</p></li><li><p>做一些它没有提到的事情。</p></li><li><p>没有做它没有提到但应该做的事情。</p></li><li><p>它很难理解，难以使用，运行缓慢，或者——在软件测试人员看来——最终用户会认为它完全不正确</p></li></ol></li><li>软件测试的定义：对软件产品进行充分测试，尽早找出其中的缺陷，并督促相关人员进行修复</li></ol><h3 id="bug类型">Bug类型</h3><table><thead><tr class="header"><th>缺陷类型</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>功能</td><td>影响了各种系统功能、逻辑的缺陷</td></tr><tr class="even"><td>用户界面</td><td>影响了用户界面、人机交互特性，包括屏幕格式、用户输入灵活性、结果输出格式等方面的问题</td></tr><tr class="odd"><td>文档</td><td>影响发布和维护，包括注释，用户手册，设计文档</td></tr><tr class="even"><td>软件包</td><td>由于软件配置库、变更管理或版本控制引起的错误</td></tr><tr class="odd"><td>性能</td><td>不满足系统可测量的属性值，如执行时间，事务处理速率等</td></tr><tr class="even"><td>系统/模块接口</td><td>与其他组件、模块或设备驱动程序、调用参数、控制块或参数列表等不匹配、冲突</td></tr></tbody></table><h3 id="bug频率">Bug频率</h3><table><thead><tr class="header"><th>缺陷产生可能性</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>总是</td><td>总是产生这个软件缺陷，其产生的频率是100%</td></tr><tr class="even"><td>通常</td><td>按照测试用例，通常情况下会产生这个软件缺陷，其产生的频率大概是80-90%</td></tr><tr class="odd"><td>有时</td><td>按照测试用例，有的时候产生这个软件缺陷，其产生的频率大概是30-50%</td></tr><tr class="even"><td>很少</td><td>按照测试用例，很少产生这个软件缺陷，其产生的频率大概是1-5%</td></tr></tbody></table><h3 id="bug评测">Bug评测</h3><ol style="list-style-type: decimal"><li>severity（严重程度）<ul><li>blocker：系统无法执行。常见的有严重花屏、内存泄漏、用户数据丢失或破坏、系统崩溃/死机/冻结、模块无法启动或异常退出、严重的数值计算错误、功能设计与需求严重不符、其它导致无法测试的错误， 如服务器500错误。</li><li>critical：主要功能存在缺陷，但不会影响系统的稳定性。常见的有功能未实现，功能错误、系统刷新错误、数据通讯错误、轻微的数值计算错误、影响功能及界面的错误字或拼写错误。</li><li>major：界面、性能缺陷、兼容性。常见的有：操作界面错误，边界条件错误，提示信息错误，长时间操作无进度提示，系统未优化，兼容性问题。</li><li>minor/trivial：易用性及建议性问题</li></ul></li><li>Priority（优先级）<ul><li>immediate：马上解决</li><li>urgent：急需解决</li><li>high：高度重视，有时间要马上解决</li><li>low：在系统发布前解决，或可以不用解决</li></ul></li></ol><h3 id="bug的状态">Bug的状态</h3><table><thead><tr class="header"><th>缺陷状态</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>激活或打开（Active or Open）</td><td>问题还没有解决，存在源代码中，确认“提交的缺陷”。</td></tr><tr class="even"><td>已修正或修复（Fixed or Resolved）</td><td>认为已解决但还没有被测试人员验证</td></tr><tr class="odd"><td>关闭或非激活（Closed or Inactive）</td><td>测试人员验证后，确认缺陷不存在之后的状态</td></tr><tr class="even"><td>重新打开（Reopen）</td><td>测试人员验证后，还依然存在的缺陷，等待开发人员进一步修复</td></tr><tr class="odd"><td>推迟（Deferred）</td><td>这个软件缺陷可以在下一个版本中解决</td></tr><tr class="even"><td>保留（on hold）</td><td>由于技术原因或第三者软件的缺陷，开发人员不能修复的缺陷</td></tr><tr class="odd"><td>不能重现（Cannot duplicate）</td><td>开发不能复现这个软件缺陷，需要测试人员检查缺陷复现的步骤</td></tr><tr class="even"><td>需要更多的信息（Needmoreinfor）</td><td>开发能复现这个软件缺陷，但开发人员需要一些信息</td></tr><tr class="odd"><td>重复（Duplicate）</td><td>这个软件缺陷已经被其他的软件测试人员发现</td></tr><tr class="even"><td>不是缺陷（Notabug）</td><td>这个问题不是软件缺陷</td></tr><tr class="odd"><td>需要修改软件规格说明书（Spec modified）</td><td>由于软件规格说明书对软件设计的要求，软件开发人员无法修复这个软件缺陷</td></tr></tbody></table><!-- |缺陷状态|描述||-|-||激活或打开（Active or Open）|在需求阶段发现的缺陷|构架|在系统架构设计阶段发现的缺陷|设计|在程序设计阶段发现的缺陷|编码|在编码阶段发现的缺陷|测试|在测试阶段发现的缺陷|用户|在用户使用阶段发现的缺陷 --><h3 id="bug起源">Bug起源</h3><table><thead><tr class="header"><th>缺陷起源</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>需求</td><td>在需求阶段发现的缺陷</td></tr><tr class="even"><td>构架</td><td>在系统架构设计阶段发现的缺陷</td></tr><tr class="odd"><td>设计</td><td>在程序设计阶段发现的缺陷</td></tr><tr class="even"><td>编码</td><td>在编码阶段发现的缺陷</td></tr><tr class="odd"><td>测试</td><td>在测试阶段发现的缺陷</td></tr><tr class="even"><td>用户</td><td>在用户使用阶段发现的缺陷</td></tr></tbody></table><h3 id="bug来源">Bug来源</h3><table><thead><tr class="header"><th>缺陷来源</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>需求说明书</td><td>需求说明书的错误、或不清楚引起的问题</td></tr><tr class="even"><td>设计文档</td><td>设计文档描述不正确、和需求说明书不一致的问题</td></tr><tr class="odd"><td>系统集成接口</td><td>系统各模块参数不匹配、开发组之间缺乏协调引起的缺陷</td></tr><tr class="even"><td>数据流（库）</td><td>由于数据字典、数据库中的错误引起的缺陷</td></tr><tr class="odd"><td>程序代码</td><td>纯粹在编码中的问题所引起的缺陷</td></tr></tbody></table><h3 id="bug根源">Bug根源</h3><table><thead><tr class="header"><th>缺陷根源</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>测试策略</td><td>错误的测试范围，误解了测试目标，超越测试能力等</td></tr><tr class="even"><td>过程，工具和方法</td><td>无效的需求收集过程，过时的风险管理过程，不适用的项目管理方法，没有估算规程，无效的变更控制过程等</td></tr><tr class="odd"><td>团队/人</td><td>项目团队职责交叉，缺乏培训，没有经验的项目团队，缺乏士气和动机不纯等</td></tr><tr class="even"><td>缺乏组织和通讯</td><td>缺乏用户参与，职责不明确，管理失败等</td></tr><tr class="odd"><td>硬件</td><td>硬件配置不对、缺乏，或处理器缺陷导致算术精度丢失，内存溢出等</td></tr><tr class="even"><td>软件</td><td>软件设置不对、缺乏，或操作系统错误导致无法释放资源，工具软件的错误，编译器的错误，2000千年虫问题等</td></tr><tr class="odd"><td>工作环境</td><td>组织机构调整，预算改变，工作环境恶劣，如噪音过大</td></tr></tbody></table><h2 id="测试驱动开发tdd">测试驱动开发（TDD）</h2><h3 id="软件测试模型">软件测试模型</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214172252.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="v模型">V模型</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214175713.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>不难看出，在V模型中，只是把测试作为编码之后的一个阶段，并没有在需求开发阶段就进入测试。这也算是他的一个缺点了。</li></ul><h4 id="w模型">W模型</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214175803.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>可以看出，W模型增加了软件开发的阶段中应同步进行的验证和确认活动，W模型有两个V字模型组成，分别代表测试与开发过程。在这里，测试的对象就不仅仅是程序。需求和设计等同样需要进行测试，测试和开发是一起进行的。</li></ul><h4 id="h模型">H模型</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214175835.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>测试流程：<ul><li>测试准备活动：测试计划、测试设计、测试开发</li><li>测试执行活动：测试运行、测试评估</li></ul></li><li><p>测试不仅仅是测试执行，还包括其他活动</p></li><li><p>测试是一个独立流程，贯穿产品整个周期，与其他流程并发进行</p></li><li><p>测试要尽早准备，尽早执行</p></li></ul><h2 id="软件测试的实质">软件测试的实质</h2><h3 id="九大原则">九大原则</h3><ol style="list-style-type: decimal"><li><p>完全测试一个程序是不可能的。</p></li><li><p>软件测试是一种基于风险的实践。</p></li><li><p>测试不能显示没有bug。</p></li><li><p>发现的错误越多，错误就越多</p></li><li><p>并不是所有发现的bug都会被修复。</p></li><li><p>很难说bug什么时候是真正的bug。</p></li><li><p>规格说明不是最终的</p></li><li><p>软件测试人员不是项目中最受欢迎的成员。</p></li><li><p>软件测试是一个严格的技术专业。</p></li></ol><h3 id="软件测试的误区">软件测试的误区</h3><ol style="list-style-type: decimal"><li><p>如果发布出去的软件有质量问题，都是软件测试人员的错</p></li><li><p>软件测试技术要求不高，至少比编程容易多了</p></li><li><p>有时间就多测试一点，没时间就少测试一点</p></li><li><p>软件测试是测试人员的事，与开发人员无关</p></li><li><p>根据软件开发瀑布模型，软件测试是开发后期的一个阶段</p></li></ol><h3 id="软件测试的分类">软件测试的分类</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214181049.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol style="list-style-type: decimal"><li>黑盒测试和白盒测试<ul><li>黑盒测试：功能测试、数据驱动测试</li><li>白盒测试：结构测试、逻辑驱动测试</li></ul></li><li>静态测试和动态测试<ul><li>静态测试：互审、走查、审查会议</li><li>动态测试：运行程序</li></ul></li><li><p>自动测试和手工测试</p></li><li><p>单元测试，集成测试，系统测试，验收测试的区别</p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214182731.png" /></div></li></ol><h3 id="测试动态阶段sdlc">测试动态阶段（SDLC）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214181153.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="测试与调试">测试与调试</h3><ul><li><p>测试发展的初期，测试就是调试，而现在测试是一个系统化工程化的概念，调试的范畴更小</p></li><li><p>调试不属于测试，是编码阶段的工作，由程序员完成；调试与测试的对象及采用的方法有很大程度上的相似，调试还用到断点控制等排错方法，其目的却完全不同</p></li><li><p>而测试由测试员或程序员完成</p></li><li><p>测试是为了找出软件中存在的缺陷；而调试是为了解决存在的缺陷</p></li><li><p>成功的测试发现了错误的症状，从而引起调试的进行</p></li></ul><h3 id="verification验证-与-validation确认">verification(验证) 与 validation(确认)</h3><ul><li><p>Verification是验证，是通过提供客观证据证明规定的要求是否得到满足，也就是说，输入与输出的比较</p></li><li><p>Validation是确认，是在验证的基础上，对预期的使用和应用要求是否得到满足，也就是说，在确认时，应考虑使用和应用的条件范围要远远大于输入时确定的范围。一般是由客户或代表客户的人执行</p></li></ul><h3 id="sqasoftware-quality-assurance">SQA（Software Quality Assurance）</h3><ol style="list-style-type: decimal"><li><p>SQA是通过对软件产品和活动有计划的进行评审和审计来验证软件是否合乎标准的系统工程活动</p></li><li>SQA与软件测试的关系<ul><li>SQA是管理工作、审查对象是流程、强调预防为主</li><li>测试是技术实施工作、测试对象是产品、主要是以事后检查（文档、程序）为主</li><li>SQA指导测试、监控测试</li><li>测试为SQA提供依据</li><li>测试是SQA的一个环节、一个手段</li></ul></li></ol><h3 id="iso与cmmcmmi">ISO与CMM/CMMI</h3><ul><li><p>ISO是通用的国际标准，适用于各类组织</p></li><li><p>CMM是美国军方为评价软件供应商的质量水平，委托SEI开发的一个评价模型，只用于软件业</p></li><li><p>CMM更详细，更专业</p></li><li><p>ISO只建立了一个可接受水平，而CMM是一个具有五个水平的评估工具</p></li><li><p>ISO聚焦于供应商和用户间的关系，而CMM更关注软件的开发过程</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214193817.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="测试计划与测试用例">测试计划与测试用例</h2><h3 id="测试用例">测试用例</h3><ul><li><p>因为我们不可能进行穷举测试，为了节省时间和资源、提高测试效率，必须要从数量极大的可用测试数据中精心挑选出具有代表性或特殊性的测试数据来进行测试</p></li><li>测试用例的定义：<ul><li>满足特定目的的测试数据、测试代码、测试规程的集合</li><li>是发现软件缺陷的最小测试执行单元</li><li>有特殊的书写标准和基本原则</li></ul><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214194329.png" /></div></li></ul><h4 id="良好测试用例的特征">良好测试用例的特征</h4><ul><li><p>可以最大程度、最高效率地找出软件隐藏的缺陷；可以最大程度地满足测试覆盖要求</p></li><li><p>既不过分复杂、也不能过分简单</p></li><li>使软件缺陷的表现可以清楚的判定<ul><li>测试用例包含期望的正确的结果</li><li>待查的输出结果或文件必须简单明了</li></ul></li><li><p>不包含重复的测试用例</p></li><li><p>测试用例内容清晰、格式一致、分类组织</p></li></ul><h4 id="测试用例设计生成的基本准则">测试用例设计生成的基本准则</h4><ul><li><p>测试用例的代表性：能够代表并覆盖各种合理的和不合理、 合法的和非法的、边界的和越界的、以及极限的输入数据、 操作和环境设置等;</p></li><li><p>测试结果的可判定性：即测试执行结果的正确性是可判定的，每一个测试用例都应有相应的期望结果；</p></li><li><p>测试结果的可再现性：即对同样的测试用例，系统的执行结果应当是相同的</p></li></ul><h2 id="单元测试">单元测试</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214201918.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>定义：单元测试是对软件基本组成单元进行的测试</p></li><li><p>时机：一般在代码完成后由开发人员完成，QA（质量评价)人员辅助</p></li><li><p>内容 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214201848.png" /></p></li></ul><h3 id="单元测试的策略">单元测试的策略</h3><ul><li>黑盒测试</li><li>白盒测试<ul><li>静态白盒测试：代码检查<ol style="list-style-type: decimal"><li>走查：采用讲解、讨论和模拟运行的方式进行的查找错误的活动</li><li>审查：采用讲解、提问方式进行，一般有正式的计划、流程和结果。主要方法采用缺陷检查表</li><li>评审：通常在审查会后进行，审查小组根据记录和报告进行评估</li></ol></li><li><p>动态白盒测试 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214202737.png" /></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219131116.png" /></div></li></ul></li></ul><h2 id="黑盒测试">黑盒测试</h2><h3 id="等价类划分方法">等价类划分方法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219111003.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol style="list-style-type: decimal"><li><p>在每一个等价类中取一个数据作为测试的输入条件，使用少量代表性的测试数据取得较好的测试结果</p></li><li>等价类划分：<ul><li>有效等价类：对程序来说合理的、有意义的输入数据构成的集合</li><li>无效等价类：与有效等价类定义相反</li></ul></li><li><p>设计用例既要考虑有效等价类，也要考虑无效等价类</p></li><li>步骤<ol style="list-style-type: decimal"><li>建立等价类表，列出所有划分出的等价类<ul><li><table><thead><tr class="header"><th>输入条件</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr class="odd"><td>...</td><td>...</td><td>...</td></tr><tr class="even"><td>...</td><td>...</td><td>...</td></tr></tbody></table></li></ul></li><li>设计一个新的用例，使其尽可能多地覆盖尚未覆盖的有效等价类。重复直到所有有效等价类均被测试用例所覆盖</li><li>设计一个新的测试用例，使其只覆盖一个无效等价类。重复这一步使所有无效等价类均被覆盖。</li></ol></li></ol><h3 id="边界值分析方法">边界值分析方法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219111020.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol style="list-style-type: decimal"><li>使等价类的每个边界都要作为测试条件</li><li>步骤：<ol style="list-style-type: decimal"><li>确定边界情况</li><li>选取正好等于、刚刚大于或刚刚小于边界值作为测试数据</li></ol><blockquote><p>一般情况，一个边界可以给出3个边界测试用例，自身+左右值</p></blockquote></li></ol><h3 id="错误推测方法">错误推测方法</h3><blockquote><p>通过经验和直觉推测出程序的错误所在</p></blockquote><h3 id="判定表驱动分析方法">判定表驱动分析方法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215161503.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol style="list-style-type: decimal"><li><p>判定表通常由五个部分组成： <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215161413.png" /></p></li><li>步骤：<ol style="list-style-type: decimal"><li>列出所有的条件桩和动作桩</li><li>确定规则的个数，假如有n个条件桩，每个条件桩有两个取值（Y，N），故有<span class="math inline">\(2^n\)</span>种规则</li><li>填入条件项</li><li>填入动作项。得到原始判定表</li><li>根据原始判定表的规则，设计测试用例，要求覆盖所有的原始判定表的规则（一条规则至少一个测试用例）</li></ol></li></ol><h3 id="因果图方法">因果图方法</h3><ol style="list-style-type: decimal"><li><p>借助图的方式，设计测试用例，被测数据有多种输入条件，输出结果依赖于输入条件的组合</p></li><li>步骤：<ol style="list-style-type: decimal"><li>分析软件规格说明描述中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件），并给每个原因和结果赋予一个标识符</li><li>分析软件规格说明描述中的语义，找出原因与结果之间，原因与原因之间对应的关系，根据这些关系画出因果图</li><li>将因果图转换为判定表</li><li>把判定表的每一列拿出来作为依据，设计测试用例</li></ol></li><li>约束<ul><li>E约束（异）：a和b至多有一个可能为1，即a和b不能同时为1</li><li>I约束（或）：a、b和c中至少有一个为1，即a、b和c不能同时为0</li><li>O约束（唯一）：a和b有且只有一个为1</li><li>R约束（要求）：a是1时，b必须是1</li></ul></li><li>例子<ul><li>某软件规格说明书包含这样的要求：第一列字符必须是A或B，第二列字符必须是一个数字，在此情况下进行文件的修改，但如果第一列字符不正确，则给出信息L；如果第二列字符不是数字，则给出信息M。 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215162515.png" /></li></ul></li></ol><h3 id="场景法">场景法</h3><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215163326.png" /></div><ol style="list-style-type: decimal"><li><p>用例场景用来描述流经用例的路径，从用例开始到结束遍历这条路径上所有基本流和备选流</p></li><li>步骤：<ol style="list-style-type: decimal"><li>设计场景：通过用例的主事件流和备选事件流的组合给出不同的场景</li><li>设计测试用例覆盖场景</li><li>根据测试用例标准给出具体的测试数据</li></ol></li></ol><h2 id="白盒测试">白盒测试</h2><h3 id="controlflow-testing">ControlFlow-testing</h3><h4 id="逻辑分支覆盖法">逻辑分支覆盖法</h4><ul><li>语句覆盖<ol style="list-style-type: decimal"><li>设计若干个测试用例，运行被测程序，使得每一个可执行语句至少执行一次，最弱的逻辑覆盖 <img src="https://i.loli.net/2019/10/18/HtbdAgyuUGf3qZM.png" alt="image.png" /></li></ol></li><li>判定覆盖<ol style="list-style-type: decimal"><li>使得程序每个判断的取真分支和取假分支至少经历一次。判定覆盖又称为分支覆盖 <img src="https://i.loli.net/2019/10/18/JHAGtq7VWOv8ZXx.png" alt="image.png" /> <img src="https://i.loli.net/2019/10/18/lZXyESUPuYVz9JH.png" alt="image.png" /></li></ol></li><li>条件覆盖<ol style="list-style-type: decimal"><li>使得每个判断的每个条件可能的取值至少执行一次 <img src="https://i.loli.net/2019/10/18/AaCvH4JEhWli9Xc.png" alt="image.png" /></li></ol></li><li>判定-条件覆盖<ol style="list-style-type: decimal"><li>使每个判定中每个条件所有可能结果至少出现一次，每个判定本身的判定结果也至少出现一次 <img src="https://i.loli.net/2019/10/18/NZModnXQOxjE8f1.png" alt="image.png" /></li></ol></li><li>复合判定 <img src="https://i.loli.net/2019/10/18/bq2u1BlXg8a6zfr.png" alt="image.png" /></li><li>条件组合覆盖<ol style="list-style-type: decimal"><li>使得每个判断的所有可能的条件取值组合至少执行一次</li><li>显然满足条件组合覆盖的测试用例一定满足判定覆盖、条件覆盖和判定-条件覆盖 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215155336.png" /></li></ol></li></ul><h4 id="路径法">路径法</h4><ul><li>流图 <img src="https://i.loli.net/2019/10/18/UQfDR9vPFCiMuKb.png" /></li><li>路径覆盖<ol style="list-style-type: decimal"><li><p>保证程序中每条可能的路径都至少执行一次</p></li><li><p>路径表达式 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215155658.png" /></p></li></ol></li><li>基本（独立）路径测试法<ol style="list-style-type: decimal"><li><p>独立路径：从入口到出口的路径，至少经历一个从未走过的边</p><blockquote><p>缺点：简化循环结构</p></blockquote></li><li>步骤<ol style="list-style-type: decimal"><li>根据程序的逻辑结构画出程序框图</li><li><p>根据程序框图导出流图</p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219124903.png" /></div></li><li>计算流图G的环路复杂度</li><li>确定只包含独立路径的基本路径集</li><li>设计测试用例</li></ol></li><li>环复杂度计算法：<ol style="list-style-type: decimal"><li>流图的区域数量应该对应环复杂度</li><li>流图的环复杂度V(G)=E-N+2，E为流图中边数量，N为流图中节点数量</li><li>V(G)=P+1，P为流图中的判断节点数量</li></ol></li></ol></li></ul><h3 id="dataflow-testing">DataFlow-testing</h3><blockquote><p>填补路径和分支测试的缝隙</p></blockquote><h4 id="数据对象类别">数据对象类别</h4><ul><li>Defined, Created, Initialized</li><li>Killed, Undefined, Released</li><li>Used:<ul><li>Used in a calculation</li><li>Used in a predicate</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214200217.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="defined-objects">Defined Objects</h5><ul><li>一个对象(例如变量)是被定义的当:<ul><li>出现在数据声明中</li><li>被赋值</li><li>是一个文件被打开</li><li>被动态分配</li></ul></li></ul><h5 id="used-objects">Used Objects</h5><ul><li>一个对象是被使用的当其是计算或谓词的一部分<ul><li>用于计算的对象（C-use）</li><li>用于谓词的对象（P-use）</li></ul></li></ul><h4 id="du-path-segments">du Path Segments</h4><ul><li><p>A du Path is a path segment such that if the last link has a use of X, then the path is simple and definition clear</p></li><li>A def-use association is a triple (x, d, u), where:<ul><li>x is a variable</li><li>d is a node containing a definition of x</li><li>u is either a statement or predicate node containing a use of x,</li></ul><p>and there is a sub-path in the flow graph from d to u with no other definition of x between d and u.</p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214201026.png" /></div></li></ul><h4 id="data-flow-testing-strategies">Data-Flow Testing Strategies</h4><ul><li>All du Paths(ADUP)<ul><li><p>ADUP是最强的数据流测试策略之一</p></li><li><p>ADUP要求从每个变量的每个定义到该定义的每次使用的每个du path都要在某个测试下执行All du Paths策略(ADUP)。</p></li></ul></li><li><p>All Uses(AU)</p></li><li><p>Others not covered in this course …</p></li></ul><h2 id="集成测试">集成测试</h2><h3 id="集成策略">集成策略</h3><ul><li>自顶向下</li><li>自底向上</li><li>混合策略</li><li>关键现行</li><li>Function-at-a-time</li><li>Big bang（大棒模式）</li></ul><h3 id="集成测试的模式渐增式测试模式与非渐增式测试模式">集成测试的模式：渐增式测试模式与非渐增式测试模式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191214215832.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="非渐增式测试模式先分别测试每个模块再把所有模块按设计要求放在一起结合成所要的程序如大棒模式">非渐增式测试模式：先分别测试每个模块，再把所有模块按设计要求放在一起结合成所要的程序，如大棒模式</h4><ul><li><p>大棒集成方法</p><blockquote><p>因为所有的模块一次集成的，所以很 难确定出错的真正位置、所在的模块、错误的原因。这种方法并不推荐在任何 系统中使用，适合在规模较小的应用系 统中使用。</p></blockquote></li></ul><h4 id="渐增式测试模式把下一个要测试的模块同已经测试好的-模块结合起来进行测试测试完以后再把下一个应该测试的模块结合进来测试">渐增式测试模式：把下一个要测试的模块同已经测试好的 模块结合起来进行测试，测试完以后再把下一个应该测试的模块结合进来测试</h4><ul><li>自顶向下集成测试<ul><li><p>桩程序/桩模块，也有人称为存根程序，用以模拟被测模块工作过程中所调用的模块。桩模块由被测模块调用，它们一般只进行很少的数据处理，例如打印入口和返回，以便于检验被测模块与其下级模块的接口</p></li><li>优缺点：<ul><li>早期验证主要功能</li><li>需要桩程序、上层模块接口错误发现早，底层关键模块错误发现晚</li></ul></li></ul></li><li>自底向上集成测试<ul><li><p>驱动程序/驱动模块（driver），用以模拟被测模块的上级模块。驱动模块在集成测试中接受测试数据，把相关的数据传送给被测模块，启动被测模块，并打印出相应的结果</p></li><li><p>优缺点：底层模块接口错误发现早，需要驱动程序、后期验证主要功能</p></li></ul></li><li><p>混合策略模式</p><blockquote><p>对软件结构中较上层，使用的是“自顶向下”法；对软件架构中较下层，使用的是“自底向上”法，两者相结合</p></blockquote></li><li><p>Critical-first 测试</p><blockquote><p>首先集成最关键的组件</p></blockquote><ul><li>保证最重要的模块优先工作</li><li>可能很难整合</li></ul></li><li><p>Function-at-a-time 测试</p><blockquote><p>同时集成执行一个功能所需的所有模块</p></blockquote><ul><li>简化测试</li><li>推迟功能间的交互与集成</li></ul></li></ul><h2 id="系统测试">系统测试</h2><h3 id="功能测试">功能测试</h3><blockquote><p>在集成测试结束之后，依据系统的需求规格说明书和产品功能说明书对系统的整体功能进行的全面测试，称为功能测试</p></blockquote><h3 id="回归测试">回归测试</h3><blockquote><p>对修正缺陷后的软件进行再次的测试，不仅测试被修复的软件缺陷是否已经解决，还要测试软件旧有的功能与非功能是否满足要求</p></blockquote><h3 id="冒烟测试">冒烟测试</h3><blockquote><p>具体说，冒烟测试就是在每日build建立后，对系统的基本功能进行简单的测试。这种测试强调功能的覆盖率</p></blockquote><h3 id="压力测试">压力测试</h3><blockquote><p>压力测试是在一种需要反常数量、频率或资源的方式下，执行可重复的负载测试或强度测试，以检查程序对异常情况的抵抗能力，找出性能瓶颈。</p></blockquote><ul><li>稳定性测试，也叫可靠性测试（reliability testing）， 是指连续运行被测系统，检查系统运行时的稳定程度。<ul><li>我们通常用mtbf（mean time between failure,即错误发生的平均时间间隔）来衡量系统的稳定性， mtbf越大，系统的稳定性越强</li><li>稳定性测试的方法也很简单，即采用24*7（24小时 * 7天）的方式让系统不间断运行，至于具体运行多少天，是一周还是一个月，视项目的实际情况而定。</li><li>在选定压力下，系统持续运行24小时来检测稳定性情况，检测系统的必要性能指标</li></ul></li><li>破坏性加压测试：通常是指持续不断的给被测系统增加压力，直到将被测系统压垮为止（让问题与薄弱环节快速暴露出来）。 用来测试系统所能承受的最大压力。</li></ul><h4 id="压力测试工具loadrunner">压力测试工具——LoadRunner</h4><ol style="list-style-type: decimal"><li>Virtual User Generator 创建脚本<ul><li>创建脚本，选择协议</li><li>录制脚本</li><li>编辑脚本</li><li>检查修改脚本是否有误</li></ul></li><li>中央控制器（Controller）来调度虚拟用户<ul><li>创建Scenario，选择脚本</li><li>设置机器虚拟用户数</li><li>设置Schedule</li><li>如果模拟多机测试，设置Ip Spoofer</li></ul></li><li>运行脚本<ul><li>分析scenario</li></ul></li><li>分析测试结果</li></ol><h3 id="容量测试">容量测试</h3><blockquote><p>容量测试目的是通过测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限值状态下还能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。</p></blockquote><h3 id="性能测试">性能测试</h3><blockquote><p>通过测试确定系统运行期间的性能表现与性能数据， 得到如：CPU使用的效率、运行速度、响应时间、占有系统资源等方面的系统数据</p></blockquote><h3 id="安全性测试">安全性测试</h3><ul><li>安全性测试是检查系统对非法侵入的防范能力。安全测试期间，测试人员假扮非法入侵者，采用各种办法试图突破防线。 例如：<ul><li>想方设法截取或破译口令；</li><li>专门开发软件来破坏系统的保护机制；</li><li>故意导致系统失败，企图趁恢复之机非法进入；</li><li>试图通过浏览非保密数据，推导所需信息等等</li></ul></li></ul><h3 id="可靠性测试">可靠性测试</h3><blockquote><p>可靠性（Reliability）是产品在规定的条件下和规定的时间内完成规定功能的能力，它的概率度量称为可靠度。软件可靠性是软件系统的固有特性之一，它表明了一个软件系统按照用户的要求和设计的目标，执行其功能的可靠程度。软件可靠性与软件缺陷有关，也与系统输入和系统使用有关。理论上说，可靠的软件系统应该是正确、完整、一致和健壮的。</p></blockquote><h3 id="容错性测试">容错性测试</h3><blockquote><p>容错性测试是检查软件在异常条件下自身是否具有防护性的措施或者某种灾难性恢复的手段。如当系统出错时，能否在指定时间间隔内修正错误并重新启动系统</p></blockquote><h2 id="验收测试">验收测试</h2><blockquote><p>在软件产品完成了功能测试和系统测试之后、产品发布之前所进行的软件测试活动它是技术测试的最后一个阶段,也称为交付测试</p></blockquote><ul><li><p>前提：系统或软件产品已通过了系统测试的软件系统。</p></li><li><p>测试内容：验证系统是否达到了用户需求规格说明书（可能包括项目或产品验收准则）中的要求，测试试图尽可能地发现软件中存留的缺陷，从而为软件进一步改善提供帮助， 并保证系统或软件产品最终被用户接受。主要包括易用性测试、兼容性测试、安装测试、文档（如用户手册、 操作手册等）测试等几个方面的内容。</p></li><li>α测试和β测试<ul><li><p>α测试是指软件开发公司组织内部人员模拟各类用户对即将面市软件产品（称为α版本）进行测试，试图发现错误并修正。</p></li><li><p>经过α测试调整的软件产品称为β版本。紧随其后的β测试是指软件开发公司组织各方面的典型用户在日常工作中实际使用β版本，并要求用户报告异常情况、提出批评意见。然后软件开发公司再对β版本进行改错和完善</p></li></ul></li></ul><h2 id="软件本地化测试">软件本地化测试</h2><ul><li>软件国际化（SW Internationalization，第一个字母与最后一个字母间有18个字母，I18N）<ul><li>软件国际化是在软件设计和文档开发过程中，使得功能和代码设计能处理多种语言和文化传统，使创建不同语言版本时，不需要重新设计源程序代码的软件工程方法。</li></ul></li><li>软件本地化（SW Localization，L与N间有10个字母， L10N）<ul><li>软件本地化是将一个软件产品按特定国家/地区或语言市场的需要进行加工，使之满足特定市场上的用户对语言和文化的特殊要求的软件生产活动。</li></ul></li><li>软件全球化（G11N）<ul><li>G11N = I18N + L10N（全球化 = 国际化 + 本地化）</li><li>国际化要方便本地化</li><li>首先是国际化，国际化是核心，本地化在国际化基础之上完成</li></ul><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191215141336.png" title="fig:" /></li></ul><h2 id="软件配置管理">软件配置管理</h2><blockquote><p>是指通过执行版本控制、变更控制等规程，以及使用合适地配置管理软件，来保证所有配置项地完整性和可跟踪性</p></blockquote><h3 id="软件配置">软件配置</h3><ul><li>软件配置指一个软件产品在软件生存周期各个阶段所产生的各种形式（机器可读或人工可读）和各种版本的文档、程序及其数据的集合。该集合中的每一个元素称为该软件产品软件配置中的一个<strong>配置项</strong>，软件配置项是配置管理的基本单位<ul><li>软件配置项可以是：<ol style="list-style-type: decimal"><li>与合同、过程、计划和产品有关的文档和数据</li><li>源代码、目标代码和可执行代码</li><li>相关产品，包括软件工具、库内的可利用软件、外购软件及用户提供的软件</li></ol></li><li><p><strong>版本</strong>是某一配置项的已标识了的实例。也可以说，不可变的源对象经质量检查合格后所形成的新的相对稳定的格局（配置）称为软件版本</p></li><li><p><strong>版本控制</strong>就是管理在整个软件生存周期中建立起来的某一配置项的不同版本</p></li></ul></li><li><p><strong>基线</strong>指一个配置项在其生存周期的某一特定时间，被正式表明、固定并经正式批准的阶段性版本，又称里程碑</p></li><li><p>配置控制组/委员会是指一组负责评估和审批配置项变更的人员，以确保所有的变更都是经过审核的</p></li><li><p>配置状态统计是软件配置管理的一个要素，由有效管理所需的记录和报告信息组成。这些信息包括经核准的配置标识表、需要变更的配置状态和实施经审核的变更状态。</p></li></ul><h3 id="配置管理过程">配置管理过程</h3><ol style="list-style-type: decimal"><li><p>制定配置管理计划</p><blockquote><p>配置管理员制定《配置管理计划》，主要内容包括配置管理软硬件资源、配置项计划、基线计划、交付计划、备份计划等。CCB审批该计划</p></blockquote></li><li><p>配置库管理</p><blockquote><p>配置管理员为项目创建配置库，并给每个项目成员分配权限。各项目成员根据自己的权限操作配置库。配置管理员定期维护配置库，例如清除垃圾文件、备份配置库等</p></blockquote></li><li><p>版本控制</p><blockquote><p>在项目开发过程中，绝大部分的配置项都要经过多次的修改才能最终确定下来。对配置项的任何修改都将产生新的版本。由于我们不能保证新版本一定比老版本“好”，所以不能抛弃老版本。版本控制的目的是按照一定的规则保存配置项的所有版本，避免发生版本丢失或混淆等现象</p></blockquote></li><li><p>变更控制</p><blockquote><p>在项目开发过程中，配置项发生变更几乎是不可避免的。变更控制的目的就是为了防止配置项被随意修改而导致混乱。</p></blockquote></li><li><p>配置审计</p><blockquote><p>为了保证所有人员（包括项目成员、配置管理员和CCB）都遵守配置管理规范，质量保证人员要定期审计配置管理工作。配置审计是一种“过程质量检查”活动，是质量保证人员的工作职责之一</p></blockquote></li></ol><h2 id="软件维护">软件维护</h2><blockquote><p>软件维护是指软件系统交付使用以后，为了改正错误或满足新的需要而修改软件的过程</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219091853.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="改正性维护">改正性维护</h3><ul><li>在软件交付使用后，因开发阶段的问题以及测试得不彻底、不完全，必然会有部分隐藏得错误遗留到运行阶段。为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用，应当进行的诊断和改正错误的过程就叫做改正性维护</li></ul><h3 id="适应性维护">适应性维护</h3><ul><li>在使用过程中，<ul><li>外部环境（新的硬、软件配置）</li><li>数据环境（数据库、数据格式、数据输入/输出方式、数据存储介质） 可能发生变化</li></ul></li><li>为使软件适应这种变化，而去修改软件的过程就叫做适应性维护</li></ul><h3 id="完善性维护">完善性维护</h3><ul><li><p>在软件的使用过程中，用户往往会对软件提出的新的功能与性能要求</p></li><li><p>为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性</p></li><li><p>这种情况下进行的维护活动叫做完善性维护</p></li></ul><h3 id="预防性维护">预防性维护</h3><ul><li><p>预防性维护即软件再工程，是为了提高软件的可维护性、可靠性等，为以后进一步改进软件打下良好基础</p></li><li><p>采用先进的软件工程方法对需要维护的软件或软件中的某一部分（重新）进行设计、编制和测试，称为预防性维护</p></li></ul><h3 id="结构化维护vs非结构化维护">结构化维护VS非结构化维护</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191219092052.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>如果采用软件工程的方法进行软件开发，保证每个阶段都有完整且详细的文档，这样维护会相对容易，被称为结构化的维护</p></li><li><p>如果不采用软件工程方法开发软件，软件只有程序而欠缺文档，则维护工作变得十分困难，被称为非结构化的维护</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bug&quot;&gt;BUG&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;BUG名词解释：软件缺陷指的是系统或系统部件中那些导致系统或部件不能实现其功能或者性能的缺陷。如果在执行中遇到一个缺陷，可能引起系统的失效
&lt;ol
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL纹理贴图呈现黑白</title>
    <link href="http://yubiao-li.gitee.io/2019/12/13/OpenGL%E7%BA%B9%E7%90%86%E8%B4%B4%E5%9B%BE%E5%91%88%E7%8E%B0%E9%BB%91%E7%99%BD/"/>
    <id>http://yubiao-li.gitee.io/2019/12/13/OpenGL%E7%BA%B9%E7%90%86%E8%B4%B4%E5%9B%BE%E5%91%88%E7%8E%B0%E9%BB%91%E7%99%BD/</id>
    <published>2019-12-13T03:53:00.000Z</published>
    <updated>2019-12-13T03:57:23.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><ul><li><p>明明我使用的贴图是彩色的，加载到OpenGl却显示为黑白的 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/lava.jpg" /></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191213115448.png" /></div></li></ul><h2 id="解决方案">解决方案</h2><ul><li>原来我使用的贴图是从网上找的，而OpenGL对纹理的要求好像是大小满足2的倍数，用PS改一下图片大小即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;明明我使用的贴图是彩色的，加载到OpenGl却显示为黑白的 &lt;img src=&quot;https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/da
      
    
    </summary>
    
    
    
      <category term="OpenGL" scheme="http://yubiao-li.gitee.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-算法设计与分析复习提纲</title>
    <link href="http://yubiao-li.gitee.io/2019/12/11/2019-SCUT-%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2019/12/11/2019-SCUT-%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2019-12-11T04:02:20.000Z</published>
    <updated>2020-03-04T08:37:40.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="蛮力算法">蛮力算法</h2><ol style="list-style-type: decimal"><li><p>选择排序</p></li><li><p>冒泡排序</p></li><li><p>字符串匹配</p></li><li><p>Closest-Pair问题</p></li><li>凸包问题<ul><li>为了解决这个问题，我们必须找到作为多边形顶点的点（极点）。</li></ul></li><li><p>穷举搜索</p></li></ol><h2 id="分而治之">分而治之</h2><ol style="list-style-type: decimal"><li><p>归并排序 <img src="https://i.loli.net/2019/12/07/biNnU9RBIT7vFXj.png" /></p></li><li><p>快速排序</p></li><li><p>二叉树遍历和相关属性</p></li><li><p>大整数乘法</p><p><span class="math display">\[Z=X \times Y = (X_12^{n/2} + X_0) \times (Y_12^{n/2} + Y_0) = c_22^n+c_12^{n/2} + c_0\]</span></p><p><span class="math display">\[c_2 = X_1Y_1\]</span></p><p><span class="math display">\[c_1 = (X_1 + X_0) \times (Y_1 + Y_0) - X_1Y_1 - X_0Y_0\]</span></p><p><span class="math display">\[c_0 = X_0Y_0\]</span></p><div class="figure"><img src="https://i.loli.net/2019/12/07/cIlWBu8ZnDKfbqp.png" /></div></li><li><p>strassen矩阵乘法 <img src="https://i.loli.net/2019/12/07/kLHiSJ3vFEK7s6U.png" /></p><p><span class="math display">\[M_1 = (A_{00} + A_{11}) * (B_{00} + B_{11})\]</span></p><p><span class="math display">\[M_2 = (A_{10} + A_{11}) * B_{00}\]</span></p><p><span class="math display">\[M_3 = A_{00} * (B_{01} - B_{11})\]</span></p><p><span class="math display">\[M_4 =  A_{11} * (B_{10} - B_{00})\]</span></p><p><span class="math display">\[M_5 = (A_{00} + A_{01}) * B_{11}\]</span></p><p><span class="math display">\[M_6 = (A_{10} - A_{00}) * (B_{00} + B_{01})\]</span></p><p><span class="math display">\[M_7 = (A_{01} - A_{11}) * (B_{10} + B_{11})\]</span></p></li><li>Closest-Pair<ol style="list-style-type: decimal"><li><p>使用一条垂线将点集分割为两半</p></li><li><p>分别递归找出两半中点对距离的最小值</p></li><li><p>让<span class="math inline">\(d_1\)</span>和<span class="math inline">\(d_2\)</span>分别为两边点集的最小距离，<span class="math inline">\(d = \min(d_1,d_2)\)</span> <img src="https://i.loli.net/2019/12/07/uN65zLX8ariVOqZ.png" /></p></li><li><p>为了不暴力穷举算出带状区域中的最近点距离，可以优化。<span class="math inline">\(C_1\)</span>和<span class="math inline">\(C_2\)</span>中的点按y坐标的递增顺序存储，在执行下一步时通过合并来维护y坐标。我们可以顺序处理<span class="math inline">\(C_1\)</span>点，而指向<span class="math inline">\(C_2\)</span>列表的指针将扫描一个宽度为2d的间隔，获取最多6个候选点，以计算它们到<span class="math inline">\(C_1\)</span>列表当前点P的距离。 <img src="https://i.loli.net/2019/12/07/XTN7IHlDQveCkJ3.png" /></p></li></ol></li><li>快速凸包算法<ol style="list-style-type: decimal"><li><p>找出最左最右的顶点，练成一条直线，将点集分割为上下两部分 <img src="https://i.loli.net/2019/12/08/pfkQ5yzAxKvROWD.png" /></p></li><li><p>对于上下两部分，找出距离该直线最远距离的点，该点在凸包点集内，连接该点与直线的两顶点，重复该操作直到直线左边再无顶点 <img src="https://i.loli.net/2019/12/08/7AS3GzZeonUFKRN.png" /></p></li></ol></li></ol><h2 id="减治">减治</h2><ol style="list-style-type: decimal"><li><p>插入排序</p></li><li>DFS和BFS<ul><li>DFS<ol style="list-style-type: decimal"><li><p>任意选择图形的一个点作为根</p></li><li><p>通过连续添加顶点和边来形成从这个顶点开始的路径，其中每条新边都与路径中的最后一个顶点和路径中尚未存在的顶点相关联。</p></li><li><p>继续向此路径添加顶点和边，尽可能长。</p></li><li><p>如果这条路径经过图的所有顶点，那么由这条路径组成的树就是一个生成树。</p></li><li><p>如果路径没有经过所有的顶点，则必须添加更多的顶点和边。</p></li><li><p>移动到路径中最后一个顶点的旁边，如果可能的话，从这个顶点开始形成一个新的路径，通过那些没有访问过的顶点。</p></li><li><p>如果不能这样做，移动到路径中的另一个顶点，也就是路径中的两个顶点，然后再试一次。</p></li></ol><ul><li>我们在做dfs的时候，当访问到一个节点时，会出现四种情况：<ul><li>1.此节点未被访问过，则此次的访问关系边（发起点——&gt;接受点）称为树边（tree edge）;</li><li>2.此节点被访问过但此节点的子孙还没访问完，换句话说，此次的发起点的源头可以追溯到接收点，则此次访问关系边称为后向边（back edge）；</li></ul></li></ul></li><li>BFS<ol style="list-style-type: decimal"><li><p>任意选择图形的一个顶点作为根。</p></li><li><p>添加与此顶点相关联的边。此阶段添加的新顶点成为生成树中第1级的顶点。任意的排序他们。</p></li><li><p>对于第一级的每个顶点，按顺序访问，只要它不产生回路，就将这个顶点的每个边添加到树中。</p></li><li><p>在第1级任意排列每个顶点的子结点。这将生成树中第2级的顶点。</p></li><li><p>遵循相同的过程，直到树中的所有顶点都被添加。</p></li></ol></li></ul></li><li><p>拓扑排序 <img src="https://i.loli.net/2019/12/08/zYO8J5eTQdc3BVa.png" /></p></li><li><p>组合生成算法 <img src="https://i.loli.net/2019/12/08/JBu95STmepMjhVy.png" /></p></li><li><p>假硬币问题</p></li><li><p>俄罗斯农民乘法 <img src="https://i.loli.net/2019/12/08/sQlSm1fMKgNaAcZ.png" /></p></li><li><p>Joseplus问题</p><blockquote><p>让1到n个人站成一个圈。从1号开始，我们每隔M-1个人杀死一个人，直到只剩下一个幸存者。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cir</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        p=(p+m)%i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> p+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>One-Pile Nim</p><blockquote><p>有一堆n个筹码。两个玩家轮流从牌堆中取出至少一个和最多m个筹码。(采取的筹码的数量可能因棋而异。)赢家是拿到最后一个筹码的玩家。谁赢了游戏</p></blockquote><ul><li>看筹码的数量，如果筹码的数量刚好是m的倍数，则先拿者必输，否则先拿者必赢</li></ul></li></ol><h2 id="转治">转治</h2><ol style="list-style-type: decimal"><li><p>预排序</p><blockquote><p>当对列表进行排序时，涉及列表的许多问题都变得更简单了。</p></blockquote></li><li><p>高斯消元 <img src="https://i.loli.net/2019/12/08/IZvDo1KMtj32wny.png" /></p></li><li>平衡搜索树<ul><li><p>AVL tree：是一种二叉搜索树，对于每个节点，其左右子树的高度之差(称为平衡因子)最多为1 <img src="https://i.loli.net/2019/12/08/arUlCPsDyvH3xo8.png" /></p><ul><li><p>如果键插入违反了某个节点上的平衡要求，那么在该节点上扎根的子树将通过四个旋转中的一个进行转换。(对于根位于离新叶子最近的“不平衡”节点的子树，总是执行旋转操作。) <img src="https://s2.ax1x.com/2019/12/08/QauVdx.png" alt="QauVdx.png" /></p><div class="figure"><img src="https://s2.ax1x.com/2019/12/08/Qan6Re.png" alt="Qan6Re.png" /><p class="caption">Qan6Re.png</p></div></li></ul></li></ul></li><li>堆和堆排序<ul><li><p>堆 &gt; 它本质上是完全二叉树的。除最后一层外，所有层都已满，只有最右边的键可能丢失。并且每个节点上的键≥其子节点上的键</p><ul><li><p>构造堆的算法 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208164829.png" alt="20191208164829.png" /></p></li><li><p>插入新值的算法 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208165115.png" alt="20191208165115.png" /></p></li><li>堆排序<ol style="list-style-type: decimal"><li><p>创建一个堆</p></li><li>每次移除最顶的元素，移除n-1次。移除元素的算法：<ol style="list-style-type: decimal"><li>交换根元素与最后一个元素</li><li>堆的大小减一</li><li>如果需要，对新的根节点执行siftdown算法（参考构造堆算法）</li></ol></li></ol></li></ul></li></ul></li><li>霍纳法则和二进制指数运算<ul><li><p>霍纳法则 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208214347.png" alt="20191208214347.png" /></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208214406.png" alt="20191208214406.png" /><p class="caption">20191208214406.png</p></div><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208214420.png" alt="20191208214420.png" /><p class="caption">20191208214420.png</p></div></li><li><p>二进制指数运算 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208214614.png" alt="20191208214614.png" /></p></li></ul></li></ol><h2 id="时空间权衡">时空间权衡</h2><ol style="list-style-type: decimal"><li>计数排序<ul><li><p>遍历数组计数比该元素小的元素数量，以此确定该元素应该排在哪个位置 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208220621.png" alt="20191208220621.png" /></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208220638.png" alt="20191208220638.png" /><p class="caption">20191208220638.png</p></div></li><li>效率很低，为<span class="math inline">\(n^2\)</span>，但在一种情况下很有效：待排序数组的元素来自于一个很小的集合<ol style="list-style-type: decimal"><li><p>首先计算出各元素频率值与分布位置 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208221936.png" alt="20191208221936.png" /></p></li><li><p>然后从右到左处理数组元素，利用分布位置确定元素应放的位置，然后分布位置值减1 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208222251.png" alt="20191208222251.png" /></p></li></ol></li></ul></li><li>字符串匹配的输入增强技术<ol style="list-style-type: decimal"><li>Horspool算法<ol style="list-style-type: decimal"><li>对于给定长度为m的模式和在模式及文本中用到的字母表，构造移动表 若不匹配，设文本中，对齐模式最后一个字符的元素是字符c，根据c的不同情况确定移动的距离<ol style="list-style-type: decimal"><li><p>若模式不存在c，则移动距离是它的全部长度</p></li><li><p>若模式存在c，但它不是模式的最后一个字符，移动时把最右的c和文本的c对齐</p></li><li><p>如果c是模式最后一个字符，其他m-1个字符不包括c，移动幅度等于模式全部长度</p></li><li><p>如果c是模式最后一个字符，其他m-1个字符包括c，移动把前m-1的字符中的c和文本中的c对齐</p></li></ol><p><span class="math display">\[t(c)=\begin{cases}模式的长度m（如果c不包括在模式的前m-1个字符中）\\模式前m-1个字符最右边的c到模式最后一个字符的距离（其他情况下）\\\end{cases}\]</span></p></li><li><p>将模式与文本的开始处对齐</p></li><li><p>重复以下操作，直到找到匹配的子字符串，或者模式超出最后一个字符或文本。要么匹配，要么遇到一对不匹配的字符串，后一种情况如果c是当前文本和模式最后一个字符对齐的字符，根据移动表移动模式</p></li></ol></li><li><p>Boyer-Moore</p><blockquote><p>与上一个算法的不同之处是，如果在遇到一个不匹配字符之前已经有k个字符匹配成功了，操作不同</p></blockquote>假设文本中的这个不匹配的符号为c，我们称之为坏符号<ol style="list-style-type: decimal"><li><p>如果c不在模式中，我们把模式移动到刚好跳过这个字符的位置。为方便起见用<span class="math inline">\(t_1(c)-k\)</span>来计算移动距离，其中<span class="math inline">\(t_1(c)\)</span>是Horspool算法预先算好的表中的单元格，而k是成功匹配的字符个数</p></li><li><p>如果c在模式中，我们也可以使用<span class="math inline">\(t_1(c)-k\)</span>公式，但是k可能大于<span class="math inline">\(t_1(c)\)</span>我们不希望移动的距离为负数，所以对其稍加改良：<span class="math inline">\(d_1=\max(t_1(c)-k,1)\)</span></p></li><li><p>最后k个匹配成功的字符，记作<span class="math inline">\(suff(k)\)</span>，叫做好后缀移动。考虑一下在模式中存在另一个后继字符不同的<span class="math inline">\(suff(k)\)</span>，移动<span class="math inline">\(d_2\)</span>的距离，<span class="math inline">\(d_2\)</span>是右数第二个<span class="math inline">\(suff(k)\)</span>到最右<span class="math inline">\(suff(k)\)</span>的距离</p></li><li><p>如果不存在<span class="math inline">\(suff(k)\)</span>，我们找出长度 l &lt; k 的最长前缀，如果存在这样的前缀，求出前缀与后缀之间的距离来作为移动距离<span class="math inline">\(d_2\)</span></p></li></ol><p><span class="math display">\[d=\begin{cases}d_1,k=0\\\max(d_1,d_2),k&gt;0\end{cases}\]</span></p><p>其他步骤与Horspool算法一致</p></li></ol></li><li>散列法<ol style="list-style-type: decimal"><li><p>开散列：碰撞使用链表</p></li><li><p>闭散列：所有键都存储在散列表本身，而没有使用链表，发生碰撞使用线性探查</p></li></ol></li><li>B树<ul><li><p>次数为m，<span class="math inline">\(m\ge2\)</span></p></li><li><p>根要么是叶子，要么有2到m个子节点。</p></li><li><p>除了根节点和叶节点之外，每个节点子节点数在[m/2]和m之间(因此具有[m/2]-1到m-1个键)</p></li><li><p>树是(完全)平衡的；即，它所有的叶子都在同一层上。</p></li><li><p>树的高度<span class="math inline">\(log_m(n+1)-1 \le h \le log_{\lceil\frac{m}{2}\rceil}(n+1)-1\)</span></p></li></ul></li></ol><h2 id="动态规划">动态规划</h2><blockquote><p>动态规划是解决具有重叠子问题的递归问题的一种通用算法设计技术</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209131145.png" alt="20191209131145.png" title="">                </div>                <div class="image-caption">20191209131145.png</div>            </figure><ol style="list-style-type: decimal"><li>计算二项式系数<ul><li><p>二项式系数是二项式公式的系数: <span class="math inline">\((a + b)^n = C(n,0)a^nb^0 + . . . + C(n,k)a^{n-k}b^k + . . . + C(n,n)a^0b^n\)</span></p><p><span class="math display">\[C(n,k) = C(n-1,k) + C(n-1,k-1) , n &gt; k &gt; 0\]</span></p><p><span class="math display">\[C(n,0) = 1,   C(n,n) = 1 , n \ge 0\]</span></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209132049.png" /></div></li></ul></li><li>Warshall’s and Floyd’s Algorithm<ul><li><p>Warshall’s Algorithm <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209132325.png" /></p></li><li><p>Floyd’s Algorithm：求图上一点到另一点的最短路径，<a href="https://blog.csdn.net/qq_35644234/article/details/60875818" target="_blank" rel="noopener">通过遍历每个图上的节点作为中介节点的方法来计算</a></p></li></ul></li><li><p>最优二叉搜索树</p><blockquote><p>寻找一颗BST使得搜索的时候比较次数最小</p></blockquote><ul><li><p><span class="math inline">\(C(i,j)\)</span>表示在从i到j的子树上平均成功查找的次数，显然我们只关心<span class="math inline">\(C(1,n)\)</span>，但遵循动态规划方法，我们要求求出所有<span class="math inline">\(C(i,j)\)</span> <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209135137.png" /></p></li><li><p>推导得出以下公式 <span class="math display">\[C(i,j) = \min_{i \le k \le j} (C(i,k-1) + C(k+1,j)) + \sum_{s=i}^j p_s , 1 ≤  i ≤  j ≤ n\]</span></p></li></ul><p><span class="math display">\[C(i,i-1) = 0\]</span></p><p><span class="math display">\[C(i,i)=p_i\]</span></p><ul><li><p>例子： <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209140120.png" /></p><ol style="list-style-type: decimal"><li><p>初始表格如下 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/IMG_20191209_140255.jpg" /></p></li><li><p>我们试着计算<span class="math inline">\(C(1,2)\)</span>： <span class="math display">\[C(1,2)=\begin{cases}k=1: C(1,0) + C(2,2) + \sum_{s=1}^2p_s = 0.5\\k=2: C(2,1) + C(3,2) + \sum_{s=1}^2p_s = 0.4\\\end{cases}\]</span></p></li><li><p>主表对应位置填上次数，根表对应位置填上最优根（此处为2），在这颗树中成功查找的平均键值比较次数是0.4</p></li><li><p>重复上面过程得到最终表，即最优树中的平均比较次数为1.7，根据根表可以得到最优BST结构：C(1,4)确定C为第一层的根，以此类推 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209141002.png" /></p></li></ol></li></ul></li><li><p>背包问题和记忆功能</p><ul><li><p>背包问题 &gt; 给定n个重量为<span class="math inline">\(w_1,...,w_n\)</span>，价值为<span class="math inline">\(v_1,...,v_n\)</span>的物品和一个承重量为W的背包，求这些物品最有价值的一个子集，并且要能装到背包中</p><ol style="list-style-type: decimal"><li>设<span class="math inline">\(F(i,j)\)</span>表示考虑前i个物体和背包承重量为j时的最优解的物品总价值，可以把第i个物体是否放入背包分开进行讨论：<ol style="list-style-type: decimal"><li><p>不包括第i个物品，则<span class="math inline">\(F(i,j) = F(i-1,j)\)</span></p></li><li><p>包括第i个物品（因此，<span class="math inline">\(j-w_i\ge0\)</span>），则<span class="math inline">\(F(i,j) = v_i + F(i-1, j-w_i)\)</span></p></li></ol><p><span class="math display">\[F(i,j)=\begin{cases}\max( F(i-1,j),v_i + F(i-1,j-w_i) ), j-w_i\ge0\\F(i-1,j),j-w_i &lt;0\\\end{cases}\]</span></p><p>其中可以定义如下初始条件：<span class="math inline">\(F(0,j)=0; F(i,0)=0\)</span></p></li><li><p>我们的目标是计算<span class="math inline">\(F(n,W)\)</span>，这个表可以逐行填也可以逐列填 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209143359.png" /></p></li></ol></li><li>记忆功能：只对必要的子问题求解<ol style="list-style-type: decimal"><li><p>使用自顶向下的方式对问题求解，但需要维护一个类似于自底向上动态规划算法使用的表格，使用null初始化所有单元格。</p></li><li><p>之后一旦需要计算一个新的值，该方法先检查表中相应的单元格。如果该单元格不是“null”，他就从表中取值；否则使用递归调用进行计算，然后把返回的结果记录在表中</p></li></ol></li></ul></li></ol><h2 id="贪婪算法">贪婪算法</h2><ol style="list-style-type: decimal"><li>选择贪婪法的前提：<ul><li><p>求解问题的全局最优解可以通过局部最优的贪婪选择，从而达到全局最优。</p></li><li><p>贪婪选择：依赖于以往的选择，但不依赖于将来的选择，也不依赖于子问题的解。能够自顶向下的进行操作，将求解问题简化为一个规模更小的子问题。</p></li><li><p>对于一个具体问题，是否选择贪婪法的前提，必须每一步所做的贪婪选择最终能够找到问题的整体最优解。即满足最优子结构性质：如果一个问题最优的解决方案可以通过最优它的子问题的解决方案来获取，那么这个问题就用最优子结构的属性。</p></li></ul></li><li><p>找零问题</p></li><li>最小生成树<ol style="list-style-type: decimal"><li><p>Prim算法：拓展最小生成树</p></li><li><p>Kruskal算法：使用最短路径连接多个子树</p></li></ol></li><li><p>Dijkstra 算法</p></li><li>哈夫曼编码树<ol style="list-style-type: decimal"><li><p>初始化n个单节点的树，并为他们标上字母表中的字符。把每个字符的概率记在树的根中，用来指出树的权重（更一般来说，树的权重等于树中所有叶子的概率之和）</p></li><li><p>重复下面的步骤直到只剩一颗单独的树。找到两棵权重最小的数。把它们作为新树中的左右子树，并把权重之和作为新的权重记录在新树的根中</p></li></ol></li></ol><h2 id="迭代改进">迭代改进</h2><ol style="list-style-type: decimal"><li>单纯形法<ul><li><p>问题背景：线性规划</p><blockquote><p>给出一组约束，求极值</p></blockquote><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209184430.png" /></div></li><li>步骤<ol style="list-style-type: decimal"><li><p>将不等式约束转换为等式，求最小值转换为求最大值，即标准化问题</p></li><li><p>对于包含m个等式的n元方程组，我们需要把n-m个变量设置成0，来得到一个m个等式的m元方程。在解方程前被设为0的坐标称为非基本的，解方程得到的坐标称为基本的。如果一个基本解的所有坐标值都非负，那么这个解被称为基本可行解</p></li><li><p>单纯形法处理一系列邻接的极点。可以用一张单纯形表表示。每一行前都标出了该表格代表的基本可行解的基本变量，这个解的基本变量的值则位于最后一列。单纯形表的最后一行称为目标行。一开始，它在前n列填入目标函数的系数，只是符号取反，并在最后一列填入目标函数在初始点的值 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209191930.png" /></p></li><li><p>若目标行中无负的单元格，则该值为最优解；否则选择负值最大的单元格（优化算法为下标最小的单元格，这里可以综合考虑），这个新的基本变量被称为输入变量，它所在的列称为主元列，用↑标记主元列</p></li><li><p>选择分离变量，对于主元列上的每个正单元格，将其所在行最后一个单元格除以主元列的单元格，求得一个θ比率，θ比率最小的（相同选下标最小的）即为分离变量，即要变成非基本变量的变量，使用←标记分离变量所在行，称为主元行。记住，如果主元列没有正单元格，则不必计算θ，该问题是无界的</p></li><li><p>将当前表主元化。首先将主元行所有单元格除以主元（主元行与主元列相交单元格）来求得<span class="math inline">\(row_{new}\)</span>，然后使用<span class="math inline">\(row-c * row_{new}\)</span>替换包括目标行在内的每一行，c是各行主元列单元格 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209192637.png" /></p></li><li><p>重复使得目标行无负单元格</p></li></ol></li></ul></li><li>最大流量问题<ul><li><p>问题描述： <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191209225757.png" /></p><ul><li>没有输入边的顶点：源点</li><li>没有输出边的顶点，汇点</li><li>每条有向边的权重，容量</li><li>流量守恒要求：进入中间顶点的物质总量必须等于离开的物质总量</li><li>要求值即为源点的<strong>最大输出值</strong></li></ul></li><li><p>增益路径法（Ford-Fulkerson法）：在每次迭代寻找一条可以传输更多流量的从源点到汇点的路径。这样的路径被称为流量增益路径</p><ul><li>为了求增益路径，我们需要考虑流量网络对应的无向图：<ul><li>它们以从i到j的有向边连接，则该边具有正的未使用量<span class="math inline">\(r_{ij}= u_{ij} - x_{ij}\)</span>，称为前向边</li><li>它们以从j到i的有向边连接，则该边具有正的流量<span class="math inline">\(x_{ji}\)</span>（即可以把该边的流量减少<span class="math inline">\(x_{ji}\)</span>个单位），称为后向边</li></ul></li></ul><ol style="list-style-type: decimal"><li><p>首先找出一条增益路径 1→2→3→6 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210100902.png" /></p></li><li><p>填上流量后，找到另一条增益路径 1→4→3←2→5→6 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210101020.png" /></p></li><li><p>最终所得结果即为最大流量，可以看到没有别的增益路径了 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210101147.png" /></p></li></ol></li><li>最短增益路径法（先标记先扫描算法）：用于解决增益路径法性能退化问题<ol style="list-style-type: decimal"><li><p>这里的标记意味着用两个记号来标记一个新的顶点，第一个标记指出从源点到被标记顶点还能增加多少流量，第二个标记指出了另一个顶点的名字，为了方便起见，还可以为第二个标记加上+或-号。因此源点总可以标记为 ∞，-</p></li><li><p>解法：使用BFS，每次选择增益最大的路径 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210104315.png" /></p><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210104325.png" /></div><div class="figure"><img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210104337.png" /></div></li><li>最大流——最小割定理<ol style="list-style-type: decimal"><li><p>我们把顶点分为两个子集<span class="math inline">\(X\)</span>和<span class="math inline">\(\overline X\)</span>，<span class="math inline">\(X\)</span>包含源点，<span class="math inline">\(\overline X\)</span>包含汇点。所有头在<span class="math inline">\(X\)</span>尾在<span class="math inline">\(\overline X\)</span>的边的集合成为割，记为<span class="math inline">\(C(X,\overline X)\)</span>或者简单记作<span class="math inline">\(C\)</span></p></li><li><p>割的名字来源以下的性质：如果割的所有边删除，网络将不存在从源点到汇点的有向路径</p></li><li><p>割的容量记作<span class="math inline">\(c(X,\overline X)\)</span>，定义为构成割的边的容量和。<strong>必定存在一个最小割容量，且网络中最大流量值等于最小割容量</strong></p></li></ol></li></ol></li></ul></li><li><p>二分图的最大匹配</p><blockquote><p>参考<a href="https://www.cnblogs.com/findview/p/11326578.html" target="_blank" rel="noopener">匈牙利算法</a></p></blockquote><ol style="list-style-type: decimal"><li><p>匹配是图中边的子集，其中任意两边都不共顶点。<strong>最大匹配</strong>是包含最多边的匹配</p></li><li><p>二分图指所有顶点可以分为两个不相交的集合，每条边都连接两个集合各一个顶点，也称为二色图，即可以使用两种颜色使得每条边的两顶点颜色都不同。不难证明，当且仅当图中不存在奇数长度的回路时，图是二色图</p></li><li>步骤<ol style="list-style-type: decimal"><li><p>从一个初始匹配开始（如空集合），二分图的其中一个点集作为队列出发，对于每一个点，求增益路径</p></li><li><p>求出一个最长增益路径，将增益路径的所有匹配边断开，所有未匹配边就是新的匹配集合（增益）。</p><blockquote><p>增益路径：从未匹配点开始，按照未匹配边，匹配边交替的模式直到找到一个未匹配点结束。</p></blockquote></li><li><p>若路径长度为偶数（不满足开头结尾为未匹配边），且无法找到别的增益路径，匹配结束</p></li></ol></li></ol></li><li>稳定婚姻问题<ol style="list-style-type: decimal"><li><p>问题背景：有一个n个男士的集合与n个女士的集合。每个男士有一个对女士的意向排序，同样的每个女士也对男士有一个意向排序。 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210115759.png" /></p><p>当然也可以将两个表合并 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191210115825.png" /></p><p>m行w列的元素包含两个等级：第一个是w在m的优先列表中的位置，第二个是m在w的优先列表中的位置</p><ul><li><p>受阻对：如果在匹配M中，男士m和女士w没能匹配但他们都更倾向对方而不是M中的伴侣，那么称(m,w)为受阻对</p></li><li><p>如果婚姻匹配M不存在受阻对，我们说它是稳定的</p></li></ul></li><li>步骤<ol style="list-style-type: decimal"><li><p>一开始所有的男士和女士都是自由的</p></li><li>如果有自由男士，从中任选一个然后执行以下步骤<ol style="list-style-type: decimal"><li><p>求婚：选中的自由男士m向w求婚，w是他优先列表上的下一个女士（即优先级最高且之前没有拒绝过他）</p></li><li><p>回应：如果w是自由的，他接受求婚和m配对。她把m和她当前的配偶作比较。如果她更喜欢m，她接受m的求婚，她的前配偶就变成自由人。否则，她拒绝m的求婚，m还是自由的</p></li></ol></li><li><p>返回n个匹配对的集合</p></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;蛮力算法&quot;&gt;蛮力算法&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;冒泡排序&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串匹配&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cl
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>github + picGo 搭建个人专属图床</title>
    <link href="http://yubiao-li.gitee.io/2019/12/08/github-picGo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yubiao-li.gitee.io/2019/12/08/github-picGo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E5%9B%BE%E5%BA%8A/</id>
    <published>2019-12-08T07:54:28.000Z</published>
    <updated>2019-12-08T08:30:08.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><ul><li><p>之前写Markdown一直使用的是SMMS的图床，十分方便，无需登录，直接上传剪切板中的截图，但是无奈使用过程经常会出现<code>Flood detected. You can only upload 10 images per minute</code>的问题，而且一等就是好久不见恢复</p><div class="figure"><img src="https://s2.ax1x.com/2019/12/08/QaKz2F.png" alt="QaKz2F.png" /><p class="caption">QaKz2F.png</p></div></li><li><p>思考了很久觉得这不是长久之计，而且万一以后SMMS停止服务了，保存在上面的图片不就全没了，不太安全。网上百度了一下发现了新的解决方案，于是就有了这篇文章。</p></li></ul><h2 id="优点">优点</h2><ul><li>因为作者经常使用的是VSCode写博客，所以本方法使用的是 VSCode 的 PicGo 插件 + Github。PicGo是Github大佬写的一个用于上传图片的工具，可以将图片上传到多个图床，这里不细讲。用Github做图床的好处就是，除非Github没了，不然你的图片不会没了，稳定性可以保证。不足之处就是大家会在你的Github上看见一个图床的仓库，里面是各种奇奇怪怪的图片。不过Github仓库不支持图片缩略图预览，所以应该没有人那么无聊去翻你仓库的图片</li></ul><h2 id="步骤">步骤</h2><ol style="list-style-type: decimal"><li><p>新建仓库，点击 git 主页右上角的 + 创建 New repository； &gt; 填写仓库信息，例如我就创建了一个 cloudimg 的仓库。这里注意，仓库得设置为 Public 因为后面通过客户端访问算是外部访问，因此无法访问 Private ，这样的话图片传上来之后只能存储不能显示。所以要设置为 Public。</p><div class="figure"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzExMjIyNTE0LnBuZw" /></div></li><li><p>创建 token 并复制保存<br /><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzExMjIyOTI1LnBuZw" /></p><p>在页面最下找到 Developer settings，点击进入；</p><div class="figure"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzE1NTIzMTQ2OTEyMzIucG5n" /></div><p>创建Token</p><div class="figure"><img src="https://s2.ax1x.com/2019/12/08/QaQznJ.png" alt="QaQznJ.png" /><p class="caption">QaQznJ.png</p></div><p>Note随便填写，然后勾选Repo复选框即可</p><div class="figure"><img src="https://s2.ax1x.com/2019/12/08/QalenH.png" alt="QalenH.png" /><p class="caption">QalenH.png</p></div><p>点击Generate Token，然后就可以看见生成了一个Token，记得复制保存，因为这个Token只会显示一次</p><div class="figure"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzExMjIzOTAxLnBuZw" /></div></li><li><p>打开VSCode，搜索安装插件PicGo，并进行一系列配置 <img src="https://s2.ax1x.com/2019/12/08/Qa3l6S.png" alt="Qa3l6S.png" /></p><p>自定义域名：<code>https://raw.githubusercontent.com/[username]/[仓库名]/master</code></p></li><li><p>设置完成后参照PicGo插件的文档介绍，就可以使用相应的快捷键来上传图片啦~。这里试着截个图，然后<code>Ctrl+Alt+U</code>上传剪贴板图片 <img src="https://raw.githubusercontent.com/Yubiao-Li/cloudimg/master/data/20191208162931.png" alt="20191208162931.png" /></p></li></ol><h2 id="教程结束">教程结束~~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前写Markdown一直使用的是SMMS的图床，十分方便，无需登录，直接上传剪切板中的截图，但是无奈使用过程经常会出现&lt;code&gt;Flood detected. You can only upload 
      
    
    </summary>
    
    
    
      <category term="Markdown" scheme="http://yubiao-li.gitee.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-软件项目管理期末复习</title>
    <link href="http://yubiao-li.gitee.io/2019/12/06/2019-SCUT-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yubiao-li.gitee.io/2019/12/06/2019-SCUT-%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2019-12-06T03:15:35.000Z</published>
    <updated>2019-12-06T08:29:49.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件管理概述">软件管理概述</h2><ol style="list-style-type: decimal"><li>什么是项目：项目是为了创造一个<strong>唯一</strong>的产品或提供一个唯一的服务而进行的<strong>临时性</strong>的努力<ul><li>项目有一个特定的目的</li><li>项目是临时性的</li><li>项目是通过不断完善细节而逐步开展的</li><li>项目通常需要来自不同领域的资源</li><li>项目应有一个主要客户或发起人</li><li>项目含有不确定性</li></ul></li><li><p>三项约束（triple constraint）：范围（scope）、时间（time）、成本（cost）</p></li><li><p>什么是项目管理：项目管理指“在项目活动中运用专门的知识、技能、工具和技术，以满足项目需求” &gt; 十大知识领域：范围管理、时间管理、成本管理、质量管理、人力资源管理、沟通管理、风险管理、采购管理、干系人管理</p></li><li><p><strong>干系人</strong>是指参与项目或受项目活动影响的人，包括项目发起人、项目团队、支持人员、客户、使用者、供应商，甚至是项目的反对者</p></li><li>项目成功<ul><li>项目达到了范围、时间和成本目标</li><li>项目使客户/项目发起人感到满意</li><li>项目的结果达到了主要目标</li></ul></li><li><p>项目群 &gt; 一组相互联系的项目，宜使用协同方法进行管理来获得收益和进行控制，而这种收益和控制在单独管理这些项目时是不易获得的</p></li><li><p>项目组合管理 &gt; 组织将项目以及项目群组合管理，使其作为一个投资组合，从而促进整个企业的成功</p></li><li>项目经理<ul><li>硬技能：<ul><li>项目管理知识体系</li><li>应用领域的知识、标准和规则</li><li>项目环境知识</li><li>普通管理知识和技能</li></ul></li><li>软技能：<ul><li>人际关系能力</li></ul></li></ul></li><li><p>项目管理协会（PMI） &gt; 提供（技能）认证服务，包括项目管理师认证（PMP）</p></li><li><p>项目管理办公室（PMO） &gt; 一个有组织的团队，负责协调整个组织中的项目管理功能</p></li><li><p>常用项目管理工具和技术 |知识领域/种类|工具和技术| |-|-| |综合管理|项目挑选方法、项目管理方法论、项目干系人分析、工作请求、项目章程、项目管理计划、项目管理软件、变更请求、变更控制委员会、项目评审会议、经验教训报告| |范围管理|项目范围说明书、工作分解结构、工作说明书、需求分析、范围管理计划、范围验证技术、范围变更控制| |时间管理|甘特图、项目网络图、关键路径分析、赶工、快速跟踪、进度绩效测量| |成本管理|项目预算、净现值、投资回报率、回收分析、挣值管理、项目组合管理、成本估算、成本管理计划、成本基线| |质量管理|质量度量、核减清单、质量控制图、帕累托图、鱼骨图、成熟度模型、统计方法、测试计划| |人力资源管理|激励技术、共鸣式聆听、责任分配矩阵、项目组织图、资源直方图、团队建设训练| |沟通管理|沟通管理计划、启动会议、冲突管理、沟通介质选择、状态和进程报告、虚拟沟通、模板、项目Web站点| |风险管理|风险管理计划、风险登记册、概率/影响矩阵、风险分级| |采购管理|自制或外购分析、合同、建议书或者报价邀请函、资源选择、供应商评价矩阵|</p></li></ol><h2 id="项目管理和it背景">项目管理和IT背景</h2><ol style="list-style-type: decimal"><li>组织结构<ul><li><p>职能型组织结构 &gt; 职能经理或者一些特定领域（如工程、制造、IT、人力资源等）的专职副总裁报告给首席执行官（CEO）。各部门的人员在相应的专业方面都有专门的技能</p><div class="figure"><img src="https://i.loli.net/2019/12/05/JV7nHbyDuS6Yp8f.png" /></div></li><li><p>项目型组织结构 &gt; 项目经理直接向CEO负责。员工具有多种技能，从而能够按照计划来完成任务</p><div class="figure"><img src="https://i.loli.net/2019/12/05/FUdYbEvwWP7iOf3.png" /></div></li><li><p>矩阵型项目结构 &gt; 职能型和项目型结构的中间形式。个人通常即向职能经理也要向一个或多个项目经理报告</p><div class="figure"><img src="https://i.loli.net/2019/12/05/8ilC7LIzhJNqWcG.png" /></div></li></ul><blockquote><p>项目经理在一个纯粹的项目型组织结构中具有的权威最大，而在职能型组织结构中的权威最小</p></blockquote></li><li><strong>项目生命周期</strong>：项目生命周期是一系列项目阶段的集合，定义了在每个阶段要进行的工作，包括什么时候给出什么样的可交付成果，每个阶段涉及的人员和时间，以及管理层将如何控制和验证每个阶段中产生的工作。<ul><li><p>可交付成果（deliverable）是一个产品或者服务，例如报告、培训课程、硬件模块或者软件代码片段，这些是作为项目的一部分而生产或提供的</p></li><li><p>传统项目管理的基本阶段：概念、开发、实施和收尾。前两者称为项目可行性阶段，后两者称为项目获取阶段</p></li></ul></li><li><strong>系统开发生命周期（SDLC）</strong>：描述开发信息不同阶段的框架。<ul><li><p>可预测生命周期：可以明确地表达项目的范围，并且精准地预测进度和成本，包括瀑布模型（waterfall）、螺旋模型（spiral）、渐增模型（incremental build）、原型模型（prototyping）和快速应用开发模型（rapid application development, RAD）。</p></li><li><p>自适应软件开发（ASD）：早期需求不能被清晰地描述。包括敏捷软件开发</p></li></ul></li><li>组织文化的特点：<ol style="list-style-type: decimal"><li>成员认同度</li><li>团队专注度</li><li>人员聚集度</li><li>单元集成度</li><li>控制力</li><li>抗风险能力</li><li>奖励标准</li><li>抗冲突能力</li><li>结果导向度</li><li>开放系统聚集度</li></ol></li></ol><h2 id="项目管理过程组">项目管理过程组</h2><ol style="list-style-type: decimal"><li>一个<strong>项目管理过程组</strong>包括启动活动、计划活动、执行活动、监控活动以及收尾活动<ul><li><p><strong>启动过程</strong>包括定义和批准项目或者项目阶段</p></li><li><p><strong>计划过程</strong>包括制订和维护一个可执行的计划，以保证项目满足组织的要求</p></li><li><p><strong>执行过程</strong>包括协调人力和其他资源来执行项目的计划，以产生项目或者项目阶段的产品、服务或者结果</p></li><li><p><strong>监控过程</strong>包括有规律地测量和监视项目进展，以保证项目团队能够满足项目目标</p></li><li><p><strong>收尾过程</strong>包括对项目或者项目阶段地正式验收，并有效地终止</p></li></ul><blockquote><p>注意：不能把过程组与项目阶段等同起来</p></blockquote></li><li><p>项目管理过程组和知识领域的映射</p><div class="figure"><img src="https://i.loli.net/2019/12/05/qBaKFQJMVem72Lw.png" /></div></li></ol><h2 id="项目综合管理">项目综合管理</h2><ol style="list-style-type: decimal"><li><strong>项目综合管理</strong>涉及在整个项目生命周期中协调所有其他项目管理的知识领域。这种综合确保项目所有的组成要素能在正确的时间整合在一起成功地完成项目<ul><li><p><strong>制定项目章程</strong>，是指与干系人共同工作，制定一个正式批准项目的文件，即章程。</p></li><li><p><strong>开发项目管理计划</strong>，指协调所有的计划努力，制定一个连贯一致的文件——项目管理计划</p></li><li><p><strong>指挥并管理项目执行</strong>，通过执行项目管理计划中的有关活动，来执行项目管理计划</p></li><li><p><strong>监控项目工作</strong>，检查项目活力是否符合项目绩效目标</p></li><li><p><strong>综合变更控制</strong>，涉及识别、评估和管理贯穿项目生命周期的变更</p></li><li><p><strong>项目或阶段收尾</strong>，涉及完成所有的项目活动，以正式结束项目或项目阶段</p></li></ul></li><li>选择项目的方法<ul><li><p>聚焦于广泛的组织需求</p></li><li><p>将IT项目分类</p></li><li><p>进行净现值分析、投资回报率和投资回收期分析</p></li><li>净现值（NPV）分析，该计算方法将当前时间点之后的所有未来预期现金流入和流出都作折现计算。<ol style="list-style-type: decimal"><li><p>折现率（discount rate）：未来现金流折现的比率</p></li><li><p>折现因子：<span class="math inline">\(\frac{1}{(1 + r)^t}\)</span></p></li><li><p>NPV计算公式：<span class="math inline">\(NPV = \sum_{t=0}^n\frac{A_t}{(1+r)^t}\)</span>，其中n为项目年数，<span class="math inline">\(A_t\)</span>为第t年的现金流，r为折现率。现金流就是当年的收入减去支出</p></li></ol></li><li><p>投资回报率（ROI） <span class="math display">\[ROI = \frac{NPV_{INCOME} - NPV_{COST}}{NPV_{COST}}\]</span></p></li><li>内部收益率（Internal Rate of Return）<ul><li>计算方法：设<span class="math inline">\(NPV(r)=\sum_{t=0}^n\frac{A_t}{(1+r)^t}\)</span>，则<span class="math inline">\(NPV(IRR)=0\)</span></li></ul></li><li><p><strong>投资回收期分析</strong>：以净现金流的形式补偿项目总的投资所需要的时间。达到即累计净收益等于累计净成本所需的年数</p></li><li><p>加权评分模型 &gt; 是一种基于多标准进行项目选择的系统方法</p><ul><li><p>识别项目选择过程的重要指标</p></li><li><p>确定各指标的权重</p></li><li><p>分别计算得分</p></li></ul></li><li><p>实施平衡记分卡</p></li></ul></li><li><p><strong>综合变更控制</strong>涉及在项目的全生命周期中识别、评估及管理变更</p></li><li><strong>变更控制系统</strong>是一个正式的、文档化的过程，描述了正式文档何时以及如何可以被变更，通常包括一个变更控制委员会（CCB）、配置管理以及一个用于沟通变更的流程<ul><li>配置管理指版本管理和变更管理系统</li></ul></li></ol><h2 id="项目范围管理">项目范围管理</h2><ol style="list-style-type: decimal"><li><strong>范围</strong>指开发项目产品所涉及的所有工作和用来开展工作的所有过程，<strong>项目范围管理</strong>是指对项目包括什么与不包括什么的界定和控制的过程<ul><li>制定范围管理计划：确定项目的范围和需求如何管理。项目团队和合适的项目干系人共同创建一个范围管理计划和需求管理计划<ul><li>范围管理计划<ol style="list-style-type: decimal"><li>如何准备一个详细的范围说明书</li><li>如何创建一个WBS</li><li>如何维护和批准WBS</li><li>如何获得正式验收已完成的项目可交付成果</li><li>如何控制项目范围变更的请求</li></ol></li><li>需求管理计划<ol style="list-style-type: decimal"><li>如何计划、跟踪和报告需求活动</li><li>如何执行配置管理活动</li><li>如何对需求进行优先次序排序</li><li>如何使用产品指标</li><li>如何跟踪和捕获需求的属性</li></ol></li></ul></li><li>收集需求<ul><li>原型模型：分为抛弃型原型与探索型原型</li></ul></li><li><p>定义范围</p></li><li>创建工作分解结构<ul><li>工作分解结构（Work Breakdown Structure，WBS）是对项目所涉及工作面向交付成果的分组，它定义了项目的全部范围<ul><li>一个工作包（work package）即为WBS最底层的一项任务</li><li>WBS字典（WBS dictionary）是一个描述WBS每项条目详细信息的文件</li><li>批准的项目范围说明书和与之相关的WBS和WBS字典构成了范围基线（scope baseline）</li></ul></li></ul></li><li>验证范围</li><li><p>控制范围</p></li></ul></li></ol><h2 id="项目时间管理">项目时间管理</h2><ol style="list-style-type: decimal"><li><strong>项目时间管理</strong>就是确保项目按时完成所需的过程<ul><li><p>计划进度管理</p></li><li><p>定义活动</p></li><li>排序活动<ul><li>网络图，活动以箭头表示，节点表示活动的开启或结束<ol style="list-style-type: decimal"><li><p>AOA(双代号网络图，Activity On Arrow)</p><div class="figure"><img src="https://i.loli.net/2019/12/06/B6wlrI7U5ivV3Zj.png" /></div></li><li><p>AON/PDM(单代号网络图/前导图，Activity On Node)，活动被放在框内，箭头表示活动的关系（不只有FS关系）</p><div class="figure"><img src="https://i.loli.net/2019/12/06/MunJOGFR6tK3TBl.png" /></div></li></ol></li></ul></li><li><p>估算活动资源</p></li><li>估算活动工期<ul><li>关键路径法(CPM)，网络图的最长路径就是项目的关键路径<ul><li><p><strong>自由时差</strong>或自由浮动时间是一个活动在不延误紧接活动的最早开始时间的情况下可以被延误的时间，<span class="math display">\[自由时差=紧后工作最早开始时间 - 本工作的最早完成时间\]</span></p></li><li><p><strong>最早开始时间</strong>是基于项目网络逻辑可以开始的最早的可能时间</p></li><li><p><strong>总浮动时间</strong>或总时差是一个活动从它最早开始时间起，在没有拖延计划项目完成日期的情况下被耽搁的时间。<span class="math display">\[总时差=最迟开始时间—最早开始时间=最迟完成时间—最早完成时间\]</span></p></li></ul></li><li>计划评审技术（PERT），单个活动工期估计高度不确定的情况下用来估计项目工期的技术 <span class="math display">\[ PERT_{加权平均} = \frac{乐观时间 + 4 \times 最可能的时间 + 悲观时间}{6} \]</span></li></ul></li><li><p>制订进度计划</p></li><li><p>控制进度</p></li></ul></li></ol><h2 id="项目成本管理">项目成本管理</h2><ol style="list-style-type: decimal"><li>什么叫成本管理，什么叫成本<ul><li>成本：为实现一个特定目标而牺牲或放弃的资源</li><li>成本管理：用来确保在批准的预算范围内完成项目的必要过程<ol style="list-style-type: decimal"><li>计划成本管理</li><li>成本估算</li><li>确定预算</li><li>成本控制</li></ol></li></ul></li><li>成本类型<ul><li>直接成本：与项目的产品和服务的生产直接相关的成本</li><li>间接成本：项目的产品和服务的生产不直接相关的成本</li><li>沉没成本：过去已花掉的钱，就像沉船一样永远不会回来</li></ul></li><li><p>学习曲线理论 &gt; 当重复生产许多产品时，那些产品的单位成本随着数量的增多而呈现规律性的递减</p></li><li>挣值管理<ul><li>计划值（PV），也叫预算</li><li>实际成本（AC），完成一项活动所产生的直接成本和间接成本的总和</li><li>挣值（EV），实际完成工作的估算值。它是基于项目或活动初始计划成本的，是项目组当前实际完成工作的比率</li><li>完成百分比（RP），实际完成工作与在项目或活动周期给定时间内已完成计划工作的比率 |术语|公式| |-|-| |挣值(EV)|<span class="math inline">\(EV = PV \times RP\)</span>| |成本偏差(CV)|<span class="math inline">\(CV = EV - AC\)</span>| |进度偏差(SV)|<span class="math inline">\(SV = EV - PV\)</span>| |成本绩效指数(CPI)|<span class="math inline">\(CPI = EV/AC\)</span>| |进度执行指数(SPI)|<span class="math inline">\(SPI = EV/PV\)</span>| |完工估算(EAC)|<span class="math inline">\(EAC = BAC（完工预算）/CPI\)</span>| |完工时间估算|<span class="math inline">\(原始时间估算/SPI\)</span>|</li></ul></li></ol><h2 id="项目质量管理">项目质量管理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://eonline.jw.scut.edu.cn/meol/data/convert/2017/11/18/84e65734-7fbd-417f-8c77-fed3220d5935_page-5" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol style="list-style-type: decimal"><li><p>质量：反映实体满足明确和隐含需求的能力特性总和</p></li><li>项目质量管理的目的是确保项目满足它所应满足的需求<ol style="list-style-type: decimal"><li>计划质量管理</li><li>实施质量保证</li><li>控制质量<ul><li>主要输出：<ol style="list-style-type: decimal"><li>验收决策</li><li>返工</li><li>过程调整</li></ol></li><li>7种工具<ol style="list-style-type: decimal"><li><p>因果图（鱼骨图、石川图）</p><div class="figure"><img src="https://i.loli.net/2019/12/06/QRKDyf8UeLbpu3z.png" /></div></li><li>控制图<ul><li>七点运行法则：如果质量控制图上连续的7个数据点都在平均值以下/以上，或者所有点都呈现出上升或下降的趋势，那么需要检查这个过程是否有非随机问题</li></ul><div class="figure"><img src="https://i.loli.net/2019/12/06/tE9iWOwX1oyK2TP.png" /></div></li><li>检查表</li><li>散点图</li><li>直方图</li><li><p>帕累托图（28法则）</p><div class="figure"><img src="https://i.loli.net/2019/12/06/jthof4XwdCIL9yl.png" /></div></li><li><p>流程图</p></li></ol></li><li><p>统计抽样 <span class="math display">\[样本大小 = 0.25 \times (可信度因子/可接受误差)^2\]</span></p></li><li>六西格玛：一种灵活的综合系统方法，通过它实现、维持、最大化商业的成功。它密切理解客户需求、事实、数据和统计分析的规范使用，以及对管理、改进、业务流程再造的密切关注等因素唯一驱动的。<ul><li><p>完美目标：每百万机会（opportunity）中只有3.4个缺陷、误差或错误。（来源于正态分布。注意，一个产品往往有多个机会会导致错误发生）</p></li><li><p>DMAIC：界定（define）、度量（measure）、分析（analyze）、改进（improve）、控制（control）</p></li></ul></li></ul></li></ol></li><li>质量成本：一致成本加上不一致成本<ul><li><p>一致成本：确保产品满足要求和适用的成本</p></li><li><p>不一致成本：对故障或没有满足质量期望负责</p></li></ul></li></ol><h2 id="项目人力资源管理">项目人力资源管理</h2><ol style="list-style-type: decimal"><li>项目人力资源管理就是最有效地发挥每个参与项目人员的作用的过程<ol style="list-style-type: decimal"><li>计划人力资源管理<ul><li><p>组织分解结构（Organizational Breakdown Structure, OBS）：一种特殊的组织结构显示每个组织单元负责哪项工作</p></li><li><p>职责分配矩阵（Responsibility Assignment Matrix, RAM）：将WBS中描述的工作与OBS中负责实施的人员匹配</p><div class="figure"><img src="https://i.loli.net/2019/12/06/iTjStQFBZuXGgML.png" /></div></li><li><p>RACI表 <img src="https://i.loli.net/2019/12/06/4f2vsdCVoz6YTkn.png" /></p><ul><li>R——责任人（Responsibility）：负责执行这个任务</li><li>A——批准人（Accountability）：对于每个任务只有一个</li><li>C——审核人（Consultation）</li><li>I——告知人（Informed）：需要被告知任务状态和结果</li></ul></li><li><p>资源直方图 <img src="https://i.loli.net/2019/12/06/RUz3FZwKG8HNnWA.png" /></p></li></ul></li><li>组建项目团队<ul><li><p>资源负荷是指在特定时间段内，既定进度计划所需的个体资源的数量</p></li><li><p>过度分配是指在给定时间内分配给某项工作的资源超过了它可用的资源</p></li><li>资源平衡是通过任务延迟来解决资源冲突的技术。优点包括：<ol style="list-style-type: decimal"><li><p>当资源使用情况比较稳定时，需要的管理较少</p></li><li><p>可以使项目经理通过使用分包商或者其他昂贵的资源而使用零库存策略</p></li><li><p>减少财务部与项目人员的问题</p></li><li><p>提高士气</p></li></ol></li></ul></li><li>建设项目团队<ul><li>塔克曼模型：团队建设的五个阶段<ul><li>形成阶段</li><li>震荡阶段</li><li>规范阶段</li><li>执行阶段</li><li>终止阶段</li></ul></li></ul></li><li>管理项目团队</li></ol></li><li>内在激励使人们根据自己的个人兴趣爱好而参加某一活动。外在激励使人们为了获得报酬或者避免处罚而去做某些事情</li></ol><h2 id="项目沟通管理">项目沟通管理</h2><ol style="list-style-type: decimal"><li>项目沟通管理的目标是确保项目信息能够及时并且适当地生成、收集、发送、存储和部署<ol style="list-style-type: decimal"><li>计划沟通管理</li><li>管理沟通</li><li>控制沟通</li></ol></li><li><p>沟通渠道 = n(n-1)/2 ，n表示参与的人数</p></li><li>沟通方法分为三类<ol style="list-style-type: decimal"><li>互动沟通：两人或多人通过会议、电话或视频会议互动来交换信息。</li><li>推送沟通：不管是否需要都将信息发送或推送给接收者，方式有报告、电子邮件、传真、语音邮件等手段</li><li>拉式沟通：信息应要求发送给接收者，方式有网站、公告板、电子学习系统、博客类知识库和其他手段</li></ol></li></ol><h2 id="项目风险管理">项目风险管理</h2><ol style="list-style-type: decimal"><li><p>风险偏好，是指实体为了获得期望的回报愿意承担的不确定性程度</p></li><li><p>风险效用是指从潜在回报中得到的满意度 <img src="https://i.loli.net/2019/12/06/a8j7ZXYo9m6DJIK.png" /></p><ul><li>风险厌恶型：更多的回报或资金处于风险中时，风险厌恶型的人或组织从风险活动中获得的满意会越来越少，或对风险的承受力越来越低</li><li>风险喜好型</li><li>风险中性型</li></ul></li><li>风险管理<ol style="list-style-type: decimal"><li><p>计划风险管理</p></li><li>识别风险<ul><li>风险登记表<ul><li>每个风险事件的标号：项目团队可能希望对特定的风险事件进行排序或快速搜索，因此需要给每个事件赋予一种唯一的标识，如标号</li><li>风险事件的级别：级别通常用数字表示，1表示最高级别的风险</li><li>风险事件的名称：例如，有缺陷的服务器、滞后的完整性测试、减少的咨询费用和良好的宣传效果</li><li>风险事件的描述：由于风险事件的名称通常是缩写，所以风险事件的描述有助于提供更详细的描述</li><li>风险事件的分类：例如，有缺陷的服务器可能属于更大的技术类或者硬件技术类</li><li>风险根源：有缺陷的服务器可能是因为电力供应缺陷导致</li><li>每个风险的触发器：触发器是实际风险事件的指标或征兆</li><li>每个风险的潜在响应：对于有缺陷的服务器这样一个风险事件潜在响应会是按照合同条款要求供应商在规定的时间内和商定好的费用下对服务器进行更换</li><li>风险责任人：例如，某个人可能会负责与服务器相关的风险事件，管理相应的响应策略</li><li>风险发生概率：特定风险事件发生的概率有高、中、低。</li><li>风险影响：如果风险实际发生，可能对项目产生高、中、低三种影响</li><li>风险状态：风险事件发生了吗？响应措施完成了吗？风险事件与项目不再相关了吗？</li></ul></li></ul></li><li><p>实施定性风险分析：根据发生概率和影响对风险进行优先级排序 <img src="https://i.loli.net/2019/12/06/XtDBpzMoWSCksjE.png" alt="概率/影响矩阵" /></p></li><li><p>实施定量风险分析：量化分析每一个风险可能对项目标准造成的影响。</p></li><li>计划风险响应<ul><li>应对负面风险的4项基本措施<ol style="list-style-type: decimal"><li>风险规避</li><li>风险承担</li><li>风险转移</li><li>风险缓解</li></ol></li><li>应对正面风险的4项基本措施<ol style="list-style-type: decimal"><li>风险开发</li><li>风险共享</li><li>风险增强</li><li>风险承担</li></ol></li></ul></li><li><p>控制风险</p></li></ol></li></ol><h2 id="项目采购管理">项目采购管理</h2><ol style="list-style-type: decimal"><li><p>采购：从外部资源获得商品和服务</p></li><li>外包<ol style="list-style-type: decimal"><li>获得技能和技术</li><li>降低固定和周期性成本</li><li>使客户组织集中在自己的核心业务上</li><li>提供灵活性</li><li>提高可追责性</li></ol></li><li>项目采购管理包括为一个项目从外部组织获得商品或服务所需要的过程<ol style="list-style-type: decimal"><li>计划采购管理：决定采购什么，何时采购以及如何采购<ul><li>合同类型：<ol style="list-style-type: decimal"><li>固定价格合同或总付合同：对明确定义的产品或服务规定固定总价的合同 &gt; 买方承受最少的风险<ul><li>总假设点（PTA） = （最高限价 - 目标价）/ 政府份额 + 目标成本</li></ul></li><li>成本补偿合同：包括向供应商支付直接与间接实际成本的合同 &gt; 买方承受较大风险</li><li>时间与材料合同：固定价格合同与成本补偿合同的混合</li></ol></li><li>采购文档：<ol style="list-style-type: decimal"><li>建议书邀请函（request for proposal，RFP） &gt; 是用于从可能的供应商那里征求方案的文件。建议书是卖方准备的、可以满足买方需要的不同方案的文档。</li><li>报价邀请函（RFQ） &gt; 是用来从预期供应商那里征求报价或者投标的文件。投标，也成为标书或报价，是卖方准备的文件，针对买方所清晰定义的各项条款所提供的价格文档</li></ol></li></ul></li><li>实施采购<ol style="list-style-type: decimal"><li>投标人咨询会，也称为供应商咨询会或投标前咨询会，是在准备建议书或投标书之前与预期卖方的一次会面</li><li>选择供应商或者卖方，通常称为渠道选择</li></ol></li><li>控制采购</li><li>采购收尾</li></ol></li><li><p>建议书评价表 <img src="https://i.loli.net/2019/11/14/G6TZPFmwcbK5Bjr.png" alt="image.png" /></p></li></ol><h2 id="项目干系人管理">项目干系人管理</h2><ol style="list-style-type: decimal"><li>干系人管理的目的是识别项目中的所有人员和组织、分析干系人的期望，并在项目整个生命周期的项目决策里有效地吸引项目干系人的参与<ol style="list-style-type: decimal"><li>干系人识别<ol style="list-style-type: decimal"><li><p>项目干系人登记表 <img src="https://i.loli.net/2019/11/14/FQihuLczreCIaO5.png" /></p></li><li><p>干系人分析 <img src="https://i.loli.net/2019/12/06/qp3ButQr7VjaT9n.png" /></p><ul><li>无意识：没有意识到项目及其潜在影响</li><li>抗拒：意识到，但拒绝改变</li><li>中性：意识到，但是不支持也不拒绝</li><li>支持：意识到，并且支持改变</li><li>领导：意识到这个项目和它的潜在影响，并积极参与，以帮助项目成功</li></ul></li></ol></li><li><p>干系人管理计划 <img src="https://i.loli.net/2019/11/14/feYxuRXKAU2cLtb.png" /></p></li><li><p>参与干系人管理</p></li><li><p>参与干系人控制</p></li></ol></li></ol><hr /><h2 id="备注">备注</h2><ul><li>本复习笔记参考不知名师兄（姐）的复习材料和凯西·施瓦尔贝的《IT项目管理》（课本）及其课件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件管理概述&quot;&gt;软件管理概述&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;什么是项目：项目是为了创造一个&lt;strong&gt;唯一&lt;/strong&gt;的产品或提供一个唯一的服务而进行的&lt;strong&gt;临时性&lt;/stro
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-软件体系结构复习提纲</title>
    <link href="http://yubiao-li.gitee.io/2019/12/05/2019-SCUT-%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/"/>
    <id>http://yubiao-li.gitee.io/2019/12/05/2019-SCUT-%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</id>
    <published>2019-12-05T03:17:16.000Z</published>
    <updated>2019-12-17T09:14:39.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是软件架构">什么是软件架构</h2><ol style="list-style-type: decimal"><li>系统的软件架构包括软件元素、这些元素的外观，以及它们之间的关系。<ul><li>架构是涉众之间进行交流的手段</li><li>是早期设计决策的体现</li><li>是可传递、可重用的系统抽象</li></ul></li><li>结构和视图<ul><li>结构是元素本身的集合，因为它们存在于软件或硬件中。</li><li>视图是由系统涉众编写和读取的一组一致的体系结构元素的表示。</li></ul></li><li>常用的结构<ol style="list-style-type: decimal"><li><p>Module structure</p><blockquote><p>体现了关于如何将系统构建为一组代码或数据单元的决策</p></blockquote><ul><li><p>Decomposition structure（分解结构）</p><div class="figure"><img src="https://i.loli.net/2019/11/26/6NkjduHWwhI1Yf5.png" /></div></li><li><p>User structure -&gt; layer pattern</p><div class="figure"><img src="https://i.loli.net/2019/11/26/6TC5YVxwXfdSI9O.png" /></div><div class="figure"><img src="https://i.loli.net/2019/11/26/wOV7KayjMnuz2oL.png" /></div></li><li>Class structure<ul><li>模块中的关系为继承或实例</li></ul></li><li>Data model<ul><li>描述静态数据结构与它们之间的关系</li></ul></li></ul></li><li><p>Component and connector structures（C&amp;C）</p><blockquote><p>体现了关于如何将系统作为一组具有运行时行为(组件)和交互(连接器)的元素进行结构化的决策。元素是运行时组件，如服务、对等点、客户端、服务器或许多其他类型的运行时元素。连接器是组件之间的通信工具，例如调用返回、进程同步操作符、管道或其他</p></blockquote><ul><li>Service structure<ul><li><p>单元之间通过服务协调机制（如SOAP）互相交互</p><blockquote><p>SOAP(Simple Object Access Protocol)——简单对象访问协议，用来描述传递信息的格式</p></blockquote></li></ul></li><li>Concurrency structure<ul><li><p>用于确定并行的可能与可能发生资源争用的位置</p><div class="figure"><img src="https://i.loli.net/2019/12/03/JfxDEL5NC6VtgOX.png" /></div><div class="figure"><img src="https://i.loli.net/2019/12/03/cfVwqilvCIrtHTX.png" /></div></li></ul></li></ul></li><li><p>Allocation structures</p><blockquote><p>显示了软件元素和一个或多个外部环境中的元素之间的关系，软件就是在这些外部环境中创建和执行的。</p></blockquote><ul><li>Deployment structure<ul><li>说明软件在硬件上怎么分配与交互的元素</li></ul></li><li>Implementation structure<ul><li><p>说明软件元素（通常是模块）是怎么映射到系统部署的文件结构的</p><div class="figure"><img src="https://i.loli.net/2019/11/26/wftCUo5O7HnxYFg.png" /></div></li></ul></li><li>Work assignment structure<ul><li>说明模块集成实现的职责分配</li></ul></li></ul></li></ol></li><li><p>架构模式</p><blockquote><p>体系结构模式表示用于解决特定问题的元素类型及其交互形式。</p></blockquote><ol style="list-style-type: decimal"><li>Module type pattern<ul><li><p>Layered pattern</p><blockquote><p>用来构建可以分解为子任务组的程序，每个子任务都处于特定的抽象层次。每层仅为下一个更高层提供服务</p></blockquote><ul><li>问题：减少发展的不同组织之间的相互作用，并支持可移植性、可修改性、和重用</li><li>解决方案：分层模式将软件划分为层。每一层都是一组模块，它们提供了一组内聚的服务。每个层通过公共接口公开。用法必须是单向的。</li></ul></li></ul></li><li>Component and connector pattern<ul><li><p>Broker pattern 代理模式</p><blockquote><p>代理模式定义了一个运行时组件，称为代理，它代理多个客户机和服务器之间的通信</p></blockquote><ul><li>背景：许多系统服务发布在多台服务器</li><li>问题；我们如何构造分布式软件，使服务使用者不需要知道服务提供者的性质和位置？</li><li>解决方案：代理模式通过插入中介（称为代理）将客户机与提供者服务器分开，当客户机需要服务时，它通过服务接口查询代理。然后，代理将客户机的服务请求转发给服务器，该服务器处理请求</li></ul></li><li>Model-View-Controller pattern<ul><li>背景：用户界面软件是交互式应用程序中最经常修改的部分</li><li>问题：如何将用户界面功能与应用程序功能分开，但仍响应用户输入，还是对底层应用程序的数据进行响应？当底层应用程序数据发生变化时，如何创建、维护和协调用户界面的多个视图？</li><li>解决方案：模型-视图-控制器模式将应用程序功能划分为三种组件：一个模型，其中包含应用程序的数据；视图，显示底层数据的一部分并与用户交互；一个控制器，它在模型和视图之间进行中介，管理状态变化的通知</li></ul></li><li>Pipe-and-Filter pattern 管道-过滤器模式<ul><li>背景：流数据处理</li><li>问题：如何加速数据处理</li><li>解决方案：数据到达过滤器的输入端口，进行转换，然后通过其输出端口通过管道传递到下一个过滤器。单个筛选器可以将数据从一个或多个端口消耗或生成数据</li></ul></li><li>Shared data（repository） pattern 共享数据模式<ul><li>背景：各种计算组件需要共享和操作大量数据。这些数据不完全属于这些组件中的任何一个</li><li>问题：系统如何存储和操作由多个独立组件访问的持久数据？</li><li>解决方案：在共享数据模式。相互作用是由多个数据访问和至少一个共享数据存储之间的数据交流为主的持续性。交流可以通过访问器或数据存储器启动。连接器类型是数据读写。之间的数据访问的通信是通过共享数据存储介质。数据由数据存储器持久化。</li></ul><div class="figure"><img src="https://i.loli.net/2019/11/26/nEMOG8NruqUa3dJ.png" /></div></li><li><p>Client and server pattern</p><blockquote><p>这种模式由两方组成：一个服务器和多个客户端。服务器组件将向多个客户端组件提供服务。客户端向服务器请求服务，服务器向这些客户端提供相关服务。此外服务器继续侦听客户端请求</p></blockquote><ul><li>背景：大量分布式客户机希望访问共享资源和服务，我们希望控制访问或服务质量</li><li>问题：通过集中控制这些资源和服务来提高可伸缩性和可用性</li><li>解决方案：客户端通过请求服务器的服务进行交互。一些组件可以同时充当客户端和服务器。可能有一个中央服务器或多个分布式服务器</li></ul></li><li><p>Peer to peer pattern（点对点模式）</p><blockquote><p>在这种模式中，单个组件被称为同级。同事可能即作为客户端又作为服务器，并且可以随着时间动态地改变其角色</p></blockquote><ul><li>背景：分布式计算实体需要合作和协作以向分布式用户社区提供服务</li><li>问题：一组“相同”的分布式计算实体如何通过一个公共协议互相连接，这样它们就可以组织并共享其高可用性和可伸缩性的服务？</li><li>解决方案：在点对点模式中，组件直接作为对等体交互。所有的peers都是平等的。对等通信是一个典型的没有不对称的CS模式请求/响应交互</li></ul></li><li>Service-Oriented Architecture pattern SOA模式<ul><li>背景：服务消费者需要了解和使用服务，而不需要了解服务的实现</li><li>问题：我们如何支持在不同平台上运行的分布式组件的互操作性，以及由不同组织提供的不同实现语言编写，并在Internet分发？</li><li>解决方案：面向服务的体系结构模式描述了提供 和/或 服务的分布式组件的集合</li><li>元素：<ul><li>组件：<ul><li><p>服务提供者，它通过发布的接口提供一个或多个服务</p></li><li><p>服务消费者，直接或通过中介调用服务。</p></li></ul></li><li><p>企业服务总线(ESB)是一个中间元素，它可以在服务提供者和使用者之间路由和转换消息。</p></li><li><p>服务注册中心，提供者可以使用它来注册服务，使用者可以使用它来在运行时发现服务。</p></li><li>连接器：<ul><li><p>SOAP连接器，它使用SOAP协议在web服务之间进行同步通信，通常是通过HTTP。</p></li><li><p>REST连接器，它依赖于HTTP协议的基本请求/应答操作。</p></li><li><p>异步消息传递连接器，它使用消息传递系统来提供点对点或发布-订阅异步消息交换。</p></li></ul></li></ul></li><li>约束：服务使用者连接到服务提供者，但是可以使用中介组件(例如ESB、注册中心)。</li></ul></li><li>Publish-Subscribe pattern 发布订阅模式<ul><li>背景：数据生产者和消费者的确切数量和性质不是预先确定的或固定的</li><li>问题：在生产者和消费者之间传递信息，使他们不知道对方的身份，甚至他们的存在？</li><li>解决方案：提供时间、空间和同步的解耦</li></ul></li></ul></li><li>Allocation type pattern<ul><li>Multi-tier pattern 多级模式<ul><li><p>描述如何在不同的硬件和软件子集中分配和分配系统的组件，这些子集由某些通信媒介连接。</p><div class="figure"><img src="https://i.loli.net/2019/12/05/j9KpiHVEGUB1k2c.png" /></div></li></ul></li><li>Competence center pattern<ul><li>这个模式声明了软件系统的职责分配结构</li></ul></li><li><p>Platform pattern</p></li><li><p>Map-Reduce pattern</p><div class="figure"><img src="https://i.loli.net/2019/11/29/fCkX3tK2LanN4lJ.png" /></div></li></ul></li></ol></li><li>好的结构的一些经验法则<ol style="list-style-type: decimal"><li>体系结构应该是单个架构师的产品，或者是一个确定的技术领导者的一个架构师小组的产品。</li><li>架构师(或体系结构团队)应该将体系结构建立在良好指定的质量属性需求的优先列表之上。</li><li>应该使用视图记录体系结构</li><li>应该评估体系结构交付系统重要质量属性的能力</li><li>体系结构应该适合增量实现</li><li>体系结构应该以定义良好的模块为特征</li><li>体系结构不应该依赖于商业产品或工具的特定版本</li><li>产生数据的模块应该与消耗数据的模块分开</li><li>不要期望模块和组件是一一对应的</li><li>应该编写每个进程以便能够轻松地更改对特定处理器地分配 ，甚至在运行时也可以这样做</li><li>体系结构应该提供少量的组件交互方式</li></ol></li></ol><h2 id="为什么要用架构">为什么要用架构</h2><ol style="list-style-type: decimal"><li>体系结构将抑制或者促进系统的驱动质量属性</li><li>体系结构可以让你在软件升级的时候控制变更</li><li>对体系结构的分析可以对系统的质量进行早期预测</li><li>文档化体系结构增强了涉众之间的沟通</li><li>体系结构是最早、最基本、最难改变设计决策的载体</li><li>体系结构在随后的实现中定义了一组约束</li><li>体系结构决定了一个组织的结构，反之亦然</li><li>体系结构可以为演化原型提供基础</li><li>体系结构允许架构师和项目经理判断成本和进度</li><li>体系结构可以创建为可转移的、可重用的模型，形成产品线的核心</li><li>基于体系结构的开发关注的是组件的组装，而不是简单地创建它们</li><li>通过限制设计方案，体系结构可以拓宽开发人员的创造力，减少设计和系统复杂性</li><li>架构可以是培训新团队成员的基础</li><li>一个系统是否能够展示它的所需质量属性大体上取决于它的架构</li></ol><h2 id="软件体系结构的多种背景">软件体系结构的多种背景</h2><ul><li>Technical：软件体系结构在系统中扮演什么样的技术角色</li><li>Project life cycle：软件体系结构如何与软件开发生命周期的其他阶段相关联</li><li>Business：软件体系结构的存在如何影响组织的业务环境</li><li>Professional：软件架构师在组织或开发项目中的作用是什么</li></ul><h2 id="质量属性">质量属性</h2><ul><li>系统需求可以分为：<ul><li>功能需求</li><li>质量属性需求<ul><li>描述系统运行时的属性：availability、performance、usability、security</li><li>描述系统开发时的属性：modifiability、testability</li></ul></li><li>约束</li></ul></li><li>为了表达质量属性的需求我们使用了一个质量属性场景<ul><li>Stimulus source</li><li>Stimulus</li><li>Environment</li><li>Artifact</li><li>Response</li><li>Response measure</li></ul><div class="figure"><img src="http://ultramangaia.github.io/img/architecture/1.png" /></div></li><li>质量属性场景分类<ul><li>一般的质量属性场景是与系统无关的</li><li>具体的质量属性场景是特定于所考虑的特定系统的</li></ul></li><li><p>Tactics</p><blockquote><p>一个原始设计技术的集合，架构师可以用它来实现质量属性响应</p></blockquote></li><li>Tactics VS Architecture pattern<ul><li>A tatic 是针对单个质量属性的设计决策</li><li>A tatic 不考虑质量属性的权衡</li><li>Architecture pattern 可以看为一个考虑了权衡的Tatics的集合</li></ul></li><li>我们需要隔离、分类和描述战术。我们为什么要这么做?<ol style="list-style-type: decimal"><li>设计模式是复杂的，而且通常很难应用，架构师需要修改和调整它们</li><li>如果没有模式来实现架构师的设计目标，策略允许架构师从“第一原理”构建一个设计片段</li><li>通过编目策略，我们可以选择多种策略来改进特定的质量属性。选择哪种策略取决于实施成本等因素</li></ol></li><li>七种质量设计的决策：<ol style="list-style-type: decimal"><li>职责分配</li><li>协调模型</li><li>数据模型</li><li>资源管理</li><li>构建元素之间的映射</li><li>结合时间的决定</li><li>技术的选择</li></ol></li></ul><h2 id="可用性">可用性</h2><blockquote><p>可用性泛指系统在故障发生时可用的能力</p></blockquote><ul><li>提高可用性的策略分为：<ul><li>检测错误<ol style="list-style-type: decimal"><li>ping/回声</li><li>监控</li><li>心跳</li><li>时间戳、状态监视、投票、异常检测、自检</li></ol></li><li>从错误当中恢复<ol style="list-style-type: decimal"><li>活动冗余（热备用）</li><li>备用（冷备用）</li><li>降级：在组件失败的情况下维护最关键的系统功能，减少不重要的功能</li><li>重构： 重新分配职责，离开故障的资源，同时保持尽可能多的功能</li></ol></li><li>预防故障<ol style="list-style-type: decimal"><li>删除服务：暂时将系统组件置于服务状态之外，以减轻潜在的系统故障</li><li>事务：捆绑状态更新，以便在分布式组件之间交换的异步消息具有原子性、一致性、隔离性和持久性</li><li>预测模型：在检测到可能出现的未来故障的情况下，采取纠正措施</li><li>异常预防：通过智能指针、抽象数据类型、包装器防止系统异常发生</li><li>增加权限集：设计一个组件来处理更多的故障，作为其正常运行的一部分</li></ol></li></ul></li></ul><h2 id="互操作性">互操作性</h2><ul><li>互操作性是指两个或多个系统能够通过特定上下文中的接口有效地交换有意义的信息的程度<ul><li>语法互操作性是交换数据的能力</li><li>语义互操作性是对正在交换的数据进行解释的能力</li></ul></li><li>SOAP VS REST<ul><li>SOAP 与一组协议一起在 SOA 系统中使用<ul><li>服务描述 &amp; 发现： WSDL，UDDI</li><li>服务集成： BPEL</li></ul></li><li>SOAP是用来传输结构化数据的复杂方法，而REST是简单的传输少量信息的方法</li></ul></li><li>互操作性的两个目标<ul><li>了解彼此，这是定位战术的目标<ul><li>Flood/Broadcast request<ul><li>Efficient and less resource consuming for the searcher</li><li>Low resource consuming for the searched</li><li>But disturbing and resource consuming for the environment</li></ul></li><li>Successive request（一次请求一个实体并匹配，如果不匹配则继续寻找下一个）<ul><li>Less efficient and high resource consuming for the searcher</li><li>But less disturbing and less resource consuming for the environment</li></ul></li><li>Continuous/periodical advertisement<ul><li>Efficient but high resource consuming for the searched</li><li>Low resource demanding for the searcher</li><li>Disturbing and resource consuming for the environment</li></ul></li><li><p>Advertisement upon arrival of new entity （新实体到达时广播）</p><blockquote><p>需要检测新实体到达的机制</p></blockquote><ul><li>Less resource consuming for the searched</li><li>Low resource demanding for the searcher</li><li>Less disturbing and resource consuming for the environment</li></ul></li><li>Introduction of the “middlemen”, registry （中间人）<ul><li>The searched entity registers to a registry</li><li>The searcher can address to the registry to get information and find the searched entity</li></ul><div class="figure"><img src="https://i.loli.net/2019/11/29/fTMJE2Fe7XSvYDm.png" /></div></li></ul></li><li>在语义上有意义的方法交换信息。这是管理接口战术的目标，交换信息的两个方面是：<ol style="list-style-type: decimal"><li>按正确的顺序提供服务<ul><li>Orchestrate：使用控制机制来协调、管理和排序服务的调用。当系统必须以复杂的交互方式完成复杂的任务时，就会使用Orchestrate</li></ul></li><li>将一个参与者生成的信息修改为另一个参与者可接收的形式<ul><li>Tailor Interface：添加或移除接口的功能，比如翻译，缓冲或者数据平滑</li></ul></li></ol></li></ul></li></ul><h2 id="可修改性">可修改性</h2><blockquote><p>可修改性是关于变更的，我们对它的兴趣在于改变的成本和风险</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/30/4tMFQByYazewIdG.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>可修改性战术的目标<ul><li>控制变更的复杂度</li><li>控制变更的时间和花费</li></ul></li><li>战术<ul><li>Reduce Size of a Module<ul><li>Split Module</li></ul></li><li>Increase Cohesion<ul><li>Increase Semantic Coherence</li></ul></li><li>Reducing Coupling<ul><li><p>Encapsulate：封装为模块引入了显式接口。这个接口包括一个API及其相关的职责</p></li><li><p>Use an Intermediary：给定职责A和职责B之间的依赖关系(例如，首先执行A需要执行B)，可以通过使用中介打破依赖关系。</p></li><li><p>Restrict Dependencies：限制给定模块与之交互或依赖的模块</p></li><li><p>Abstract Common Services：如果两个模块提供了近似的方法，那更有效率的做法是实现一个更加一般化的服务</p></li></ul></li></ul></li><li>Publish/Subscribe System<ul><li>动机：<ul><li>传统C/S通信模型<ul><li>同步、紧耦合的请求调用</li><li>对分布式应用程序，特别是广域网和局域网，有很大的限制</li><li>当节点/链接失败时，系统收到影响。必须内置容错功能来支持这一点</li></ul></li><li>需要提供异步机制的更灵活的解耦合通信样式</li></ul></li><li>解决方案：<ul><li>发布/订阅系统是一种通信范式，它允许在(分布式)系统中通过通信实体在时间、空间和同步方面的解耦实现自由。</li><li>Publishers：发布者生成事件数据并发布它们</li><li>Subscribers：订阅者提交他们的订阅并处理接收到的事件<br /></li><li>P/S service：中介/代理过滤并将事件从发布者路由到感兴趣的订阅者</li></ul><div class="figure"><img src="https://i.loli.net/2019/12/04/g5vkrbwJ6lpm7dM.png" /></div></li><li>分类：<ul><li>Centralized Broker model（集中代理模型）<ul><li>由多个发布者、多个订阅者和一个集中的代理/代理(一个相互交互的覆盖网络)组成。</li></ul></li><li>Peer-to-Peer model<ul><li>每个节点都可以作为发布者、订阅者或代理</li><li>订阅者直接订阅发布者，发布者直接通知订阅者。所以他们必须保持对彼此的了解</li></ul></li></ul></li><li>代理中间件的关键方法<ul><li>事件过滤<ul><li>选出对产生的事件感兴趣的订阅者集合</li><li>订阅者们被存储在内存中并且在发布者发布一个新的事件时被搜索</li></ul></li><li>事件路由<ul><li>将产生的事件路由到所有感兴趣的订阅者的过程</li></ul></li></ul></li><li>Topic based VS Content based<ul><li>Topic based<ul><li><p>通常也称为基于主题、基于组或基于通道的事件过滤。</p></li><li><p>每个事件由其发布者发布到这些通道之一。</p></li><li><p>订阅者订阅特定的通道，并将接收发布到订阅通道的所有事件</p></li></ul></li><li>Content based<ul><li><p>通过允许对事件内容的任意/自定义查询中的更多表达式，为订阅者提供了更大的灵活性和更强大的功能</p></li><li><p>事件通过键/值属性对发布，而订阅使用显式订阅语言指定筛选器</p></li></ul></li></ul></li><li>优缺点：<ul><li>优点<ul><li>Robust：发布者或者订阅者错误不会影响整个系统</li><li>Scalability：适合构建包含大量实体的分布式应用程序</li><li>Adaptability：可以适应不同的环境(移动，网络游戏，嵌入式系统等)</li></ul></li><li>缺点<ul><li>Reliability：它默认所有对应的订阅者会接收到发布者发布的事件</li><li>当发布者和订阅者使中间代理超载时，可能出现瓶颈</li></ul></li></ul></li></ul></li></ul><h2 id="性能">性能</h2><blockquote><p>性能是关于时间和软件系统满足时序要求的能力</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/30/Sb8FIvE1zALrOJR.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>List Scheduling Method<ul><li><p>第一步：排序任务</p><div class="figure"><img src="https://i.loli.net/2019/11/30/7fLDxUsbwS2EH5R.png" /></div></li><li><p>第二步：选择处理器</p><div class="figure"><img src="https://i.loli.net/2019/11/30/wzGeSHMVkfRvUYl.png" /></div></li></ul></li><li>战术<ul><li>控制资源需求<ul><li>控制采样率</li><li>事件优先级</li><li>减少开销</li><li>限制执行时间</li><li>提高资源效率：提高算法</li></ul></li><li>管理资源<ul><li>提高资源</li><li>提高并发度</li></ul></li></ul></li><li>任务调度问题<ol style="list-style-type: decimal"><li><p>单处理器任务包</p></li><li><p>多处理器任务包</p></li><li><p>DAGs调度在多处理器上</p></li><li>Job Shop Problem（JSP)<ul><li>约束：每个任务要在每个处理器执行一次</li></ul></li></ol></li></ul><h2 id="安全性">安全性</h2><blockquote><p>安全性是衡量系统保护数据和信息免受未经授权访问的能力的一种度量方法，同时还提供对被授权的人和系统的访问</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/30/qAcEu4VU5Ci8Grd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>什么是安全性<ul><li>保密性——保护数据或服务不受未经授权的访问的属性</li><li>完整性——数据或服务不受未经授权的操作的属性</li><li>可用性——系统可以合法使用的属性</li><li>身份验证——验证事务各方的身份，并检查他们是否真的如他们所声称的那样</li><li>授权——授予用户执行的权力</li><li>不可抵赖性</li></ul></li><li>战术<ul><li>检测攻击<ul><li><p>检测入侵</p></li><li><p>检查服务否认：将进入系统的网络流量的模式或签名与已知拒绝服务（DoS）攻击的历史概括进行比较</p></li><li><p>检查消息的完整性：如校验和</p></li><li><p>检测消息延迟</p></li></ul></li><li>抵抗攻击<ul><li><p>标识参与者：标识系统的任何外部输入的来源。</p></li><li><p>验证参与者身份：确保用户或远程计算机实际上是它所声明的人或内容。</p></li><li><p>限制访问</p></li><li><p>限制暴露:通过尽可能少的访问点来最小化系统的攻击面。</p></li></ul></li><li>应对攻击<ul><li><p>撤销访问</p></li><li><p>锁定计算机</p></li><li><p>告知参与者</p></li></ul></li></ul></li></ul><h2 id="可测试性">可测试性</h2><blockquote><p>软件可测试性指的是软件可以通过测试来演示其故障的容易程度</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/30/IwBH4b8aCSAuGfx.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>战术<ul><li>控制并观察系统状态<ul><li><p>专门的接口：set或get函数等</p></li><li><p>记录/回放：捕获跨接口的信息并将其用作进一步测试的输入。</p></li><li><p>本地化状态存储：要以测试的任意状态启动系统，最方便的方法是将该状态存储在单个位置。</p></li><li><p>沙盒：将系统与现实世界隔离以支持实验</p></li><li><p>可执行断言:断言是手工编码的，并放置在需要的位置，以指示程序何时以及何处处于错误状态</p></li></ul></li><li>控制复杂度<ul><li><p>限制结构复杂性:避免或解决组件之间的循环依赖关系，减少组件之间的依赖关系</p></li><li><p>限制非决定论:找出所有非决定论的来源，如无约束并行论，并尽可能地清除它们。</p></li></ul></li></ul></li></ul><h2 id="易用性">易用性</h2><blockquote><p>用于描述用户使用软件完成任务的难易度</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/30/1c4RuKpGBNDzmtr.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>战术<ul><li>支持用户主动<ul><li><p>取消:系统必须监听取消请求</p></li><li><p>暂停/恢复:暂时释放资源，以便重新分配给其他任务。</p></li><li><p>恢复:维护关于系统状态的足够数量的信息，以便可以恢复较早的状态</p></li><li><p>聚合:能够将较低级别的对象聚合到一个组中，这样就可以将用户操作应用到组中，从而将用户从重复操作中解放出来。</p></li><li><p>维护任务模型:确定上下文，以便系统能够了解用户正在尝试什么并提供帮助</p></li><li><p>维护系统模型:系统维护自己的显式模型。这用于确定预期的系统行为，以便向用户提供适当的反馈</p></li></ul></li></ul></li></ul><h2 id="其他质量属性">其他质量属性</h2><ul><li><p>可移植性</p><blockquote><p>用于描述在一个平台运行的软件移植到另一不同平台运行的难易程度</p></blockquote></li><li><p>开发可分布性</p><blockquote><p>开发可分布性是设计支持分布式软件开发的软件的质量。</p></blockquote></li><li>可拓展性<ul><li><p>水平可伸缩性(向外扩展)指向逻辑单元添加更多资源，比如向集群添加另一台服务器。</p></li><li><p>垂直可伸缩性(向上扩展)是指向物理单元添加更多的资源，比如向计算机添加更多的内存</p></li></ul></li><li><p>可部署性</p><blockquote><p>可部署性涉及可执行文件如何到达主机平台以及如何调用它。</p></blockquote></li><li><p>机动性（Mobility）</p><blockquote><p>机动性处理平台的移动和可承受性问题，如电池管理、断开与重新连接、蜂窝网络中的传递</p></blockquote></li><li><p>可监测性</p><blockquote><p>可监测性处理操作人员在系统执行时监视系统的能力。</p></blockquote></li></ul><!-- ## 质量属性建模与分析## 敏捷项目的架构 --><h2 id="架构与需求">架构与需求</h2><ul><li>ASR = Architecturally Significant Requirement = 重要的架构需求<ul><li>来自需求文档</li><li>采访干系人<ul><li>组织质量属性研讨会 Quality Attribute Workshop（QAW）<ol style="list-style-type: decimal"><li>QAW演示和介绍：QAW主持人描述了QAW的动机，并解释了QAW的每个步骤</li><li>业务/任务介绍</li><li>架构计划展示</li><li>确定架构驱动程序</li><li>质量属性场景头脑风暴</li><li>整合质量属性场景</li><li>给质量属性场景分优先级</li><li>对质量属性场景进行细化</li></ol></li></ul></li><li>通过理解业务目标</li><li>在效用树</li></ul></li></ul><h2 id="设计一个架构">设计一个架构</h2><ul><li><p>设计一个架构： ADD = The Attribute-Driven Design Method = 属性驱动设计方法</p><blockquote><p>一种迭代的方法。ADD并不能导致完整的设计。在每次迭代：</p></blockquote><ul><li>选择系统的一部分进行设计</li><li>组织该部分的所有架构上的重要需求</li><li>生成并测试该部分的设计</li></ul><!-- - 有责任的容器集- 容器间的交互和信息流    > 不为容器生成api --><ul><li><p>输入：需求, 上下文描述</p></li><li><p>输出：架构元素及其关系</p></li><li>step of ADD<ol style="list-style-type: decimal"><li>选择系统的元素进行设计</li><li>确定所选元素的ASRs</li><li>为所选元素生成设计解决方案</li><li>统计剩余需求，并为下一次迭代选择输入</li><li>重复1-4直到ASRs满足</li></ol></li></ul></li></ul><h2 id="架构实现与测试">架构实现与测试</h2><ul><li>4种保持代码与架构一致性的技巧<ol style="list-style-type: decimal"><li>将设计嵌入代码中：实现者知道他们正在实现什么样的架构。他们可以将代码中的体系结构文档作为注释记录。然后任何人拿起代码都会知道一些约束条件。有的工具可以自动关联代码和体系结构</li><li>框架方法。框架是围绕特定主体组织起来的可重用的库或类集。程序员使用框架提供的服务</li><li>代码模板方法。代码模板是代码集合，程序员在其中提供特定于应用程序的部分</li><li>保持代码和体系结构的一致性（即避免体系结构的侵蚀）。<ul><li>实现可能会偏离文档体系结构</li><li>实施者可能做出与其他实施者和架构都不一致的决定</li><li>架构可能没有预见，提出所有可能性</li><li>使用工具强制架构约束。可以添加被强制执行的架构规则</li><li>在创建代码模板时，给剩下部分更多的信任/自由</li><li>计划文档/代码同步时间</li></ul></li></ol></li><li>两种级别的测试<ul><li>单元测试：测试软件的特定片段<ul><li>功能正确性的职责</li><li>综合负荷下的性能</li><li>故障注入后的可用性</li><li>可修改性的需求也可以通过将变更分配给测试团队来测试</li></ul></li><li>集成测试：<ul><li>测试功能、性能、可用性和安全性</li><li>通过测试执行各种攻击场景，可以对安全性进行测试</li><li>如果资源未释放或配置错误，系统运行很长时间后可能会降级</li></ul></li></ul></li></ul><h2 id="架构评价">架构评价</h2><ul><li>架构评价的三种形式<ul><li>设计者在设计过程中评价。每次设计者做出关键的设计决策时，所选择的方案都要进行评估</li><li>同行在设计过程中评价。同行评审可以在设计过程的任何地方进行，只要存在候选体系结构，或者至少是体系结构的一个连贯的可评审部分</li><li>设计完成后交给局外人评价，“外”是相对的，可能意味着<ul><li>在开发项目之外</li><li>在项目所在的业务单元之外，但在同一家公司</li><li>公司以外</li></ul></li></ul></li><li><p>ATAM = Architecture Tradeoff Analysis Method = 架构权衡分析方法</p><blockquote><p>ATAM是一个全面的评价软件架构的方法</p></blockquote><ol style="list-style-type: decimal"><li>介绍ATAM</li><li>现在的业务驱动程序</li><li>呈现架构</li><li>确定架构方法</li><li>生成Utility Tree</li><li>分析架构方法</li><li>头脑风暴和优先考虑情景</li><li>分析架构方法</li><li>展示结果</li></ol></li><li><p>Lightweight Architecture Evaluation 是基于 ATAM 的，提供了一种低成本的评估软件架构的方法</p></li></ul><h2 id="云架构">云架构</h2><blockquote><p>云计算是一种信息技术(IT)范式，它支持无处不在地访问共享的系统资源池和更高级别的服务，这些资源和服务可以用最少的管理工作(通常是通过Internet)快速提供。</p></blockquote><ul><li>基本属性<ul><li><p>随需应变。资源使用者可以根据需要单方面获得计算服务</p></li><li><p>资源池。云提供商的计算资源被合并。</p></li><li><p>无处不在的网络访问。云服务和资源可以通过异构网络访问</p></li><li><p>位置独立性。资源的位置不必与资源的使用者有关。</p></li><li><p>快速的弹性。能力可以迅速而灵活地提供。</p></li><li><p>现收现付制。服务的消费者仅根据他们使用的内容付费</p></li><li><p>多租户。应用程序和资源可以在不了解彼此的多个使用者之间共享。</p></li></ul></li><li>基本的服务模型<ul><li>Software as a Service (SaaS).<ul><li><p>在这种情况下，消费者是最终用户。</p></li><li><p>消费者使用在云上运行的应用程序。</p></li><li><p>E.g. e-mail services</p></li></ul></li><li>Platform as a Service (PaaS).<ul><li><p>这里的消费者是开发人员</p></li><li><p>为用户提供在云上开发和部署应用程序的编程语言和工具</p></li></ul></li><li>Infrastructure as a Service (IaaS).<ul><li><p>本例中的使用者是开发人员或系统管理员。</p></li><li><p>提供处理、存储、网络和其他基础计算资源</p></li><li><p>使用者可以部署和运行任意软件，包括操作系统和应用程序</p></li></ul></li></ul></li><li>部署模式<ul><li><p>Public cloud.云基础设施向公众开放，并由出售云服务的组织拥有。</p></li><li><p>Private cloud.云基础设施仅由单个组织拥有，且仅为该组织拥有的应用程序运行。</p></li><li><p>Community cloud.云基础设施由多个组织共享，并支持共享关注点的特定社区</p></li><li><p>Hybrid cloud.云基础设施是两个或多个云(私有、社区或公共)的组合</p></li></ul></li></ul><hr /><h2 id="此复习提纲配合中文翻译ppt食用更佳">此复习提纲配合<a href="http://ultramangaia.github.io/blog/2017/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.html" target="_blank" rel="noopener">中文翻译ppt食用更佳</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是软件架构&quot;&gt;什么是软件架构&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;系统的软件架构包括软件元素、这些元素的外观，以及它们之间的关系。
&lt;ul&gt;
&lt;li&gt;架构是涉众之间进行交流的手段&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019-SCUT-智能人机交互考试复习</title>
    <link href="http://yubiao-li.gitee.io/2019/12/03/2019-SCUT-%E6%99%BA%E8%83%BD%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yubiao-li.gitee.io/2019/12/03/2019-SCUT-%E6%99%BA%E8%83%BD%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</id>
    <published>2019-12-03T09:32:35.000Z</published>
    <updated>2019-12-05T03:32:50.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考试题型">考试题型</h1><ul><li>选择题（30分、10题）<ol style="list-style-type: decimal"><li>易用性：可学习性、性能、多长时间能保持、用户犯错的概率</li><li>人机交互原则、指南（很多考题）：58页3.1 Guidelines、principle、theory</li><li>3.3.4 黄金八大原则各是什么</li><li>80页3.4</li><li>3.4.2 七个</li><li>执行鸿沟1-4、评估鸿沟7</li><li>80-92页——Micro HCI理论、Macro HCI理论（大概3道题）</li><li>98页——设计过程</li><li>4.4 软件工程对人机交互理解，设计框架</li><li>110页 4.4.1 UCD设计框架混杂一起问你是哪个</li><li>115页 设计框架与设计方法有什么区别、联系</li><li>4.5.3 人种学观察</li><li>4.5.4</li><li>4.5.5 原型</li><li>4.6.3 设计模式（有简答有选择、大概有10分）</li><li>MPA、SPA</li><li>交互风格，直接操纵（优点、缺点），虚拟现实，增强现实，混杂现实 ，2-3题</li><li>5.3.4 可用性测试 低保真原型 dicount usability</li></ol></li><li>简答题（40分、3题）<ol style="list-style-type: decimal"><li>可用性度量标准，说出3个可用性度量指标，有助于评价软件系统的可用性<ul><li>可学习性</li><li>性能<ul><li>系统可用的时间间隔</li><li>可用性百分比（99.9999%）</li><li>检测错误的时间</li><li>修复错误的时间</li><li>系统可能处于降级模式的时间或时间间隔</li></ul></li><li>用户记忆保持多长时间</li><li>用户犯错的概率</li></ul></li><li>人的注意力是非常重要的因素，如何吸引用户注意力（如何利用人的注意力来设计软件） 3.2.3<ul><li>人的注意力有什么特点</li><li>利用注意力来设计软件</li><li>举例 &gt; 用户为亲友联系人选择颜色，或为重要的会议选择颜色，键盘击键声或手机铃声</li></ul></li><li>用户会犯错，用户怎么犯错的，怎么设计预防用户犯错，举例<ol style="list-style-type: decimal"><li>按功能来组织屏幕和菜单，设计独特的命令和菜单选项，并使用可逆操作</li><li>提供界面状态反馈（如改变光标以显示地图界面是处于放大还是选择模式）</li><li>设计一致的动作（如保证是/否按钮总是按同一顺序显示）</li><li>正确的动作。如将不适用的菜单变为灰色</li><li>完整的序列。设计人员尽量将这些步骤序列设计为一个动作</li></ol></li></ol></li><li>综合题（30分、1大题3小题）<ol style="list-style-type: decimal"><li>游戏设计（设计风格、设计模式）</li><li>简历（Web界面设计）</li><li>第六章 case study案例<ul><li>ATM，如何改善机器的用户界面</li><li>IOS，一致性和易用性</li><li>沃尔沃大数据，解决公司中的数据密集型问题</li></ul></li></ol></li></ul><h1 id="指南原则与理论">指南、原则与理论</h1><ol style="list-style-type: decimal"><li>指南 &gt; 关注低层次良好实践和危险防范的一些意见<ul><li>界面导航：<ul><li>将任务序列标准化</li><li>确保链接是描述性的</li><li>使用一致的描述性标题</li><li>对互斥选择使用单选钮</li><li>如果需要打印页面，应将宽度设置成适合于打印</li><li>使用缩略图预览较大的图像</li></ul></li><li>组织显示：<ul><li>数据显示的一致性</li><li>用户对信息的有效获取</li><li>用户记忆负担最小化</li><li>数据显示与数据输入的兼容性</li><li>用户控制数据显示的灵活性</li></ul></li><li><strong>引起用户注意</strong><ul><li>亮度</li><li>标记</li><li>尺寸</li><li>字体选择</li><li>闪烁</li><li>颜色</li><li>音频</li></ul></li><li>便于数据输入<ul><li>保证数据输入业务的一致性</li><li>将用户输入动作最小化</li><li>将用户记忆负担最小化</li><li>保证数据输入与数据显示的兼容性</li><li>保持用户控制数据输入的灵活性</li></ul></li></ul></li><li>原则 &gt; 中级策略和规则，用于分析和比较设计备选方案。指南关注的比较狭窄，原则往往更为基本、广泛和持久<ul><li>确认用户的技能水平<ul><li>新用户或者首次使用的用户</li><li>知识丰富的间歇用户</li><li>专家性常用用户</li></ul></li><li>识别任务<ul><li>选择适当的原子动作集</li><li>形成菜单树时，频繁使用的任务应靠近菜单树顶部</li></ul></li><li><p>选择交互风格 |风格|优点|缺点| |-|-|-| |直接操纵|可视化表示任务概念；允许容易地学习；允许容易地记忆；允许避免错误；鼓励探索；提供较高地主观满意度|可能难以编程；可能需要图形显示器和指向设备；需要特别注意可达性| |导航与菜单选择|缩短学习时间；减少按键；使决策结构化；允许使用对话框管理工具；允许轻松地支持错误处理|提供很多菜单的危险；会使常用用户的速度变慢；占用屏幕空间；需要快速的显示速率| |表格填充|简化数据输入；提供方便帮助的措施；允许使用表格管理工具|占用屏幕空间 |命令语言|强大；允许简单的脚本语言和历史保持|需要学习和保留；易出错| |自然语言|减轻学习句法的负担|需要说明对话框；可能不显示上下文；可能需要更多按键；不可预测|</p></li><li>黄金八大原则<ol style="list-style-type: decimal"><li>坚持一致性</li><li>寻求通用性</li><li>提供信息反馈</li><li>通过对话框产生结束信息</li><li>预防错误</li><li>提供回退操作</li><li>用户掌握控制权</li><li>减轻短期记忆负担</li></ol></li></ul></li><li>理论 &gt; 广泛适用的高级框架，在设计和评估过程中需要借鉴，需要同时支持交流与教学<ul><li>微观人机交互理论——在实验室环境中花费几秒钟或几分钟，专注于多层标准任务的可度量性能<ul><li>层次设计理论<ol style="list-style-type: decimal"><li>概念级是交互系统的用户“心智模型”</li><li>语义级描述用户的输入和计算机的输出显示所传达的含义</li><li>句法级定义传达的语义，表示用户动作如何组装成完整的句子来执行某些特定任务</li><li>词法级处理设备的依赖性和精确机制，用户借助词法级指定句法</li></ol></li><li>行动阶段理论<ol style="list-style-type: decimal"><li>形成目标</li><li>形成意图</li><li>指定行动</li><li>执行行动</li><li>感知系统状态</li><li>解释系统状态</li><li>评估结果</li></ol></li><li>一致性理论</li></ul></li><li>宏观人机交互理论——在具有丰富社会参与的现实使用环境中花几周和几个月时间，专注于用户体验的案例研究<ul><li><p>上下文理论（情景理论）</p></li><li><p>动态理论 &gt; 动态理论处理长期健康行为的变化或教育。</p></li></ul></li></ul></li></ol><h1 id="设计">设计</h1><ul><li>设计过程<ol style="list-style-type: decimal"><li>需求分析<ul><li>功能性需求</li><li>非功能性需求</li><li>用户体验需求</li></ul></li><li>概要和详细设计<ul><li>概要设计的任务是，明确交互系统的高层次设计或架构，也称架构设计</li><li>详细设计的工作是指定每个交互的细节。设计阶段的结果是一份详细的设计文件</li></ul></li><li><p>构造与实施——将所有精心的设计转化为实际的、可运行的代码</p></li><li><p>评估</p></li></ol></li><li>设计框架<ul><li>以用户为中心的设计（UCD）</li><li>参与式设计（PD）</li><li>敏捷交互设计</li></ul></li><li>设计方法 &gt; 特定的设计框架都有一种对应的设计方法。但设计框架还会给整体过程和每种设计方法定下基调<ul><li>人种学观察<ul><li>准备<ul><li>了解环境下的政策</li><li>熟悉现有的界面及其历史</li><li>设定初步目标并准备问题</li><li>获得调查或访谈的许可</li></ul></li><li>实体研究<ul><li>与所有用户建立良好关系</li><li>在用户环境中观察或采访用户，并收集主观的和客观的、定性的和定量的数据</li><li>跟踪访谈出现的所有线索</li><li>记录自己的访谈</li></ul></li><li>分析<ul><li>在数值、文本和多媒体数据库中编辑收集到的数据</li><li>量化数据和编译统计</li><li>简化和解释数据</li><li>改进所用的目标和过程</li></ul></li><li>报告<ul><li>考虑多个受众和目标</li><li>准备报告并提交调查结果</li></ul></li></ul></li><li><p>场景开发和脚本 &gt; 以用户参与的方式来完成特定的交互式系统时，需要将用例概念作为场景开发的基础，并考虑开发特定的场景</p></li><li>原型法<ul><li>低保真原型：通常由草图和便签通过剪切和粘贴完成（纸模型）</li><li>中保真原型：通常称为线框，提供一些标准化的元素（如按钮、菜单和文本域），即使采用手绘方式来画出草图，依然会有一些基本的导航功能</li><li>高保真原型：看起来几乎与最终产品相同，并具有一些基本的计算能力，但这种原型通常不完整，功能也不完善</li></ul></li></ul></li><li>设计模式<ul><li><p>模型-视图-控制器（MVC）</p></li><li>文档界面<ul><li>单文档界面（SDI）</li><li>多文档界面（MDI）</li><li>选项卡式文档接口（TDI）</li></ul></li><li>Web应用页面架构<ul><li>多页面应用（MPA）</li><li>单页应用（SPA）</li></ul></li></ul></li></ul><h1 id="评估和用户体验">评估和用户体验</h1><ul><li>可用性测试<ul><li>纸上模型与原型，测试管理员扮演一台计算机，不断翻页</li><li>简易可用性测试</li><li>竞争性可用性测试，把新页面与之前的版本或与竞争者的类似产品进行对比。</li><li>A/B测试，将参与者随机分配到两个测试组（A或B），他们看到的界面类似，但要对特定标准进行评估，且每个测试组得到的是不同版本的界面。通过对结果进行评估，查看是否存在差异。一般情况下，每组的参与者人数较多时会采用这种测试方法。每次修改页面中若干小变量，多次重复该测试</li><li>通用性测试，使用高度互异的用户、硬件、软件平台和网络来测试界面</li><li>实地测试与便捷实验室，在真实环境中测试新页面，或在一段固定的时段于更自然的实地环境中对界面进行测试</li><li>远程可用性测试</li><li>“你能攻破吗”测试</li></ul></li></ul><h1 id="交互风格">交互风格</h1><ul><li>直接操纵<ul><li>平移距离（强度）<ul><li>弱：早期的电子游戏控制器，如方向盘和操纵杆</li><li>中等：触摸屏，多点触控</li><li>强：数据手套，手势，操纵实物</li><li>沉浸式：虚拟现实，如头戴式显示器</li></ul></li></ul></li><li><p>增强现实 &gt; 使用户看到叠加了附加信息的现实世界</p></li><li><p>虚拟现实 &gt; 虚拟现实的远程呈现打破了空间限制，使得用户认为身处他处</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;考试题型&quot;&gt;考试题型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;选择题（30分、10题）
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;易用性：可学习性、性能、多长时间能保持、用户犯错的概率&lt;/li&gt;
&lt;li&gt;人机交互原则、指南（
      
    
    </summary>
    
    
    
      <category term="复习笔记" scheme="http://yubiao-li.gitee.io/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
